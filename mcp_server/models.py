# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:44:58+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, EmailStr, Field, RootModel


class APIError(BaseModel):
    message: Optional[str] = None
    url: Optional[str] = None


class AccessToken(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None
    scopes: Optional[List[str]] = None
    sha1: Optional[str] = None
    token_last_eight: Optional[str] = None


class ActivityPub(BaseModel):
    field_context: Optional[str] = Field(None, alias='@context')


class AddCollaboratorOption(BaseModel):
    permission: Optional[str] = None


class AddTimeOption(BaseModel):
    created: Optional[datetime] = None
    time: int = Field(..., description='time in seconds')
    user_name: Optional[str] = Field(
        None, description='User who spent the time (optional)'
    )


class AnnotatedTagObject(BaseModel):
    sha: Optional[str] = None
    type: Optional[str] = None
    url: Optional[str] = None


class Attachment(BaseModel):
    browser_download_url: Optional[str] = None
    created_at: Optional[datetime] = None
    download_count: Optional[int] = None
    id: Optional[int] = None
    name: Optional[str] = None
    size: Optional[int] = None
    uuid: Optional[str] = None


class BranchProtection(BaseModel):
    approvals_whitelist_teams: Optional[List[str]] = None
    approvals_whitelist_username: Optional[List[str]] = None
    block_on_official_review_requests: Optional[bool] = None
    block_on_outdated_branch: Optional[bool] = None
    block_on_rejected_reviews: Optional[bool] = None
    branch_name: Optional[str] = Field(None, description='Deprecated: true')
    created_at: Optional[datetime] = None
    dismiss_stale_approvals: Optional[bool] = None
    enable_approvals_whitelist: Optional[bool] = None
    enable_merge_whitelist: Optional[bool] = None
    enable_push: Optional[bool] = None
    enable_push_whitelist: Optional[bool] = None
    enable_status_check: Optional[bool] = None
    merge_whitelist_teams: Optional[List[str]] = None
    merge_whitelist_usernames: Optional[List[str]] = None
    protected_file_patterns: Optional[str] = None
    push_whitelist_deploy_keys: Optional[bool] = None
    push_whitelist_teams: Optional[List[str]] = None
    push_whitelist_usernames: Optional[List[str]] = None
    require_signed_commits: Optional[bool] = None
    required_approvals: Optional[int] = None
    rule_name: Optional[str] = None
    status_check_contexts: Optional[List[str]] = None
    unprotected_file_patterns: Optional[str] = None
    updated_at: Optional[datetime] = None


class ChangedFile(BaseModel):
    additions: Optional[int] = None
    changes: Optional[int] = None
    contents_url: Optional[str] = None
    deletions: Optional[int] = None
    filename: Optional[str] = None
    html_url: Optional[str] = None
    previous_filename: Optional[str] = None
    raw_url: Optional[str] = None
    status: Optional[str] = None


class CommitAffectedFiles(BaseModel):
    filename: Optional[str] = None


class CommitDateOptions(BaseModel):
    author: Optional[datetime] = None
    committer: Optional[datetime] = None


class CommitMeta(BaseModel):
    created: Optional[datetime] = None
    sha: Optional[str] = None
    url: Optional[str] = None


class CommitStats(BaseModel):
    additions: Optional[int] = None
    deletions: Optional[int] = None
    total: Optional[int] = None


class CommitStatusState(RootModel[str]):
    root: str = Field(
        ...,
        description='CommitStatusState holds the state of a CommitStatus\nIt can be "pending", "success", "error", "failure", and "warning"',
    )


class CommitUser(BaseModel):
    date: Optional[str] = None
    email: Optional[EmailStr] = None
    name: Optional[str] = None


class CreateAccessTokenOption(BaseModel):
    name: str
    scopes: Optional[List[str]] = None


class CreateBranchProtectionOption(BaseModel):
    approvals_whitelist_teams: Optional[List[str]] = None
    approvals_whitelist_username: Optional[List[str]] = None
    block_on_official_review_requests: Optional[bool] = None
    block_on_outdated_branch: Optional[bool] = None
    block_on_rejected_reviews: Optional[bool] = None
    branch_name: Optional[str] = Field(None, description='Deprecated: true')
    dismiss_stale_approvals: Optional[bool] = None
    enable_approvals_whitelist: Optional[bool] = None
    enable_merge_whitelist: Optional[bool] = None
    enable_push: Optional[bool] = None
    enable_push_whitelist: Optional[bool] = None
    enable_status_check: Optional[bool] = None
    merge_whitelist_teams: Optional[List[str]] = None
    merge_whitelist_usernames: Optional[List[str]] = None
    protected_file_patterns: Optional[str] = None
    push_whitelist_deploy_keys: Optional[bool] = None
    push_whitelist_teams: Optional[List[str]] = None
    push_whitelist_usernames: Optional[List[str]] = None
    require_signed_commits: Optional[bool] = None
    required_approvals: Optional[int] = None
    rule_name: Optional[str] = None
    status_check_contexts: Optional[List[str]] = None
    unprotected_file_patterns: Optional[str] = None


class CreateBranchRepoOption(BaseModel):
    new_branch_name: str = Field(..., description='Name of the branch to create')
    old_branch_name: Optional[str] = Field(
        None, description='Name of the old branch to create from'
    )


class CreateEmailOption(BaseModel):
    emails: Optional[List[str]] = Field(None, description='email addresses to add')


class CreateForkOption(BaseModel):
    name: Optional[str] = Field(None, description='name of the forked repository')
    organization: Optional[str] = Field(
        None, description='organization name, if forking into an organization'
    )


class CreateGPGKeyOption(BaseModel):
    armored_public_key: str = Field(..., description='An armored GPG key to add')
    armored_signature: Optional[str] = None


class Type(Enum):
    dingtalk = 'dingtalk'
    discord = 'discord'
    gitea = 'gitea'
    gogs = 'gogs'
    msteams = 'msteams'
    slack = 'slack'
    telegram = 'telegram'
    feishu = 'feishu'
    wechatwork = 'wechatwork'
    packagist = 'packagist'


class CreateHookOptionConfig(RootModel[Optional[Dict[str, str]]]):
    root: Optional[Dict[str, str]] = None


class CreateIssueCommentOption(BaseModel):
    body: str


class CreateIssueOption(BaseModel):
    assignee: Optional[str] = Field(None, description='deprecated')
    assignees: Optional[List[str]] = None
    body: Optional[str] = None
    closed: Optional[bool] = None
    due_date: Optional[datetime] = None
    labels: Optional[List[int]] = Field(None, description='list of label ids')
    milestone: Optional[int] = Field(None, description='milestone id')
    ref: Optional[str] = None
    title: str


class CreateKeyOption(BaseModel):
    key: str = Field(..., description='An armored SSH key to add')
    read_only: Optional[bool] = Field(
        None, description='Describe if the key has only read access or read/write'
    )
    title: str = Field(..., description='Title of the key to add')


class CreateLabelOption(BaseModel):
    color: str = Field(..., examples=['#00aabb'])
    description: Optional[str] = None
    exclusive: Optional[bool] = Field(None, examples=[False])
    name: str


class State(Enum):
    open = 'open'
    closed = 'closed'


class CreateMilestoneOption(BaseModel):
    description: Optional[str] = None
    due_on: Optional[datetime] = None
    state: Optional[State] = None
    title: Optional[str] = None


class CreateOAuth2ApplicationOptions(BaseModel):
    confidential_client: Optional[bool] = None
    name: Optional[str] = None
    redirect_uris: Optional[List[str]] = None


class Visibility(Enum):
    public = 'public'
    limited = 'limited'
    private = 'private'


class CreateOrgOption(BaseModel):
    description: Optional[str] = None
    full_name: Optional[str] = None
    location: Optional[str] = None
    repo_admin_change_team_access: Optional[bool] = None
    username: str
    visibility: Optional[Visibility] = Field(
        None,
        description='possible values are `public` (default), `limited` or `private`',
    )
    website: Optional[str] = None


class CreatePullRequestOption(BaseModel):
    assignee: Optional[str] = None
    assignees: Optional[List[str]] = None
    base: Optional[str] = None
    body: Optional[str] = None
    due_date: Optional[datetime] = None
    head: Optional[str] = None
    labels: Optional[List[int]] = None
    milestone: Optional[int] = None
    title: Optional[str] = None


class CreatePullReviewComment(BaseModel):
    body: Optional[str] = None
    new_position: Optional[int] = Field(
        None, description='if comment to new file line or 0'
    )
    old_position: Optional[int] = Field(
        None, description='if comment to old file line or 0'
    )
    path: Optional[str] = Field(None, description='the tree path')


class CreatePushMirrorOption(BaseModel):
    interval: Optional[str] = None
    remote_address: Optional[str] = None
    remote_password: Optional[str] = None
    remote_username: Optional[str] = None
    sync_on_commit: Optional[bool] = None


class CreateReleaseOption(BaseModel):
    body: Optional[str] = None
    draft: Optional[bool] = None
    name: Optional[str] = None
    prerelease: Optional[bool] = None
    tag_name: str
    target_commitish: Optional[str] = None


class TrustModel(Enum):
    default = 'default'
    collaborator = 'collaborator'
    committer = 'committer'
    collaboratorcommitter = 'collaboratorcommitter'


class CreateRepoOption(BaseModel):
    auto_init: Optional[bool] = Field(
        None, description='Whether the repository should be auto-initialized?'
    )
    default_branch: Optional[str] = Field(
        None,
        description='DefaultBranch of the repository (used when initializes and in template)',
    )
    description: Optional[str] = Field(
        None, description='Description of the repository to create'
    )
    gitignores: Optional[str] = Field(None, description='Gitignores to use')
    issue_labels: Optional[str] = Field(None, description='Label-Set to use')
    license: Optional[str] = Field(None, description='License to use')
    name: str = Field(..., description='Name of the repository to create')
    private: Optional[bool] = Field(
        None, description='Whether the repository is private'
    )
    readme: Optional[str] = Field(
        None, description='Readme of the repository to create'
    )
    template: Optional[bool] = Field(
        None, description='Whether the repository is template'
    )
    trust_model: Optional[TrustModel] = Field(
        None, description='TrustModel of the repository'
    )


class CreateStatusOption(BaseModel):
    context: Optional[str] = None
    description: Optional[str] = None
    state: Optional[CommitStatusState] = None
    target_url: Optional[str] = None


class CreateTagOption(BaseModel):
    message: Optional[str] = None
    tag_name: str
    target: Optional[str] = None


class Permission(Enum):
    read = 'read'
    write = 'write'
    admin = 'admin'


class CreateTeamOption(BaseModel):
    can_create_org_repo: Optional[bool] = None
    description: Optional[str] = None
    includes_all_repositories: Optional[bool] = None
    name: str
    permission: Optional[Permission] = None
    units: Optional[List[str]] = Field(
        None,
        examples=[
            [
                'repo.code',
                'repo.issues',
                'repo.ext_issues',
                'repo.wiki',
                'repo.pulls',
                'repo.releases',
                'repo.projects',
                'repo.ext_wiki',
            ]
        ],
    )
    units_map: Optional[Dict[str, str]] = Field(
        None,
        examples=[
            {
                'repo.code': 'read',
                'repo.ext_issues': 'none',
                'repo.ext_wiki': 'none',
                'repo.issues': 'write',
                'repo.projects': 'none',
                'repo.pulls': 'owner',
                'repo.releases': 'none',
                'repo.wiki': 'admin',
            }
        ],
    )


class CreateUserOption(BaseModel):
    created_at: Optional[datetime] = Field(
        None,
        description='For explicitly setting the user creation timestamp. Useful when users are\nmigrated from other systems. When omitted, the user\'s creation timestamp\nwill be set to "now".',
    )
    email: EmailStr
    full_name: Optional[str] = None
    login_name: Optional[str] = None
    must_change_password: Optional[bool] = None
    password: str
    restricted: Optional[bool] = None
    send_notify: Optional[bool] = None
    source_id: Optional[int] = None
    username: str
    visibility: Optional[str] = None


class CreateWikiPageOptions(BaseModel):
    content_base64: Optional[str] = Field(
        None, description='content must be base64 encoded'
    )
    message: Optional[str] = Field(
        None, description='optional commit message summarizing the change'
    )
    title: Optional[str] = Field(
        None, description='page title. leave empty to keep unchanged'
    )


class Cron(BaseModel):
    exec_times: Optional[int] = None
    name: Optional[str] = None
    next: Optional[datetime] = None
    prev: Optional[datetime] = None
    schedule: Optional[str] = None


class DeleteEmailOption(BaseModel):
    emails: Optional[List[str]] = Field(None, description='email addresses to delete')


class DismissPullReviewOptions(BaseModel):
    message: Optional[str] = None
    priors: Optional[bool] = None


class EditAttachmentOptions(BaseModel):
    name: Optional[str] = None


class EditBranchProtectionOption(BaseModel):
    approvals_whitelist_teams: Optional[List[str]] = None
    approvals_whitelist_username: Optional[List[str]] = None
    block_on_official_review_requests: Optional[bool] = None
    block_on_outdated_branch: Optional[bool] = None
    block_on_rejected_reviews: Optional[bool] = None
    dismiss_stale_approvals: Optional[bool] = None
    enable_approvals_whitelist: Optional[bool] = None
    enable_merge_whitelist: Optional[bool] = None
    enable_push: Optional[bool] = None
    enable_push_whitelist: Optional[bool] = None
    enable_status_check: Optional[bool] = None
    merge_whitelist_teams: Optional[List[str]] = None
    merge_whitelist_usernames: Optional[List[str]] = None
    protected_file_patterns: Optional[str] = None
    push_whitelist_deploy_keys: Optional[bool] = None
    push_whitelist_teams: Optional[List[str]] = None
    push_whitelist_usernames: Optional[List[str]] = None
    require_signed_commits: Optional[bool] = None
    required_approvals: Optional[int] = None
    status_check_contexts: Optional[List[str]] = None
    unprotected_file_patterns: Optional[str] = None


class EditDeadlineOption(BaseModel):
    due_date: datetime


class EditGitHookOption(BaseModel):
    content: Optional[str] = None


class EditHookOption(BaseModel):
    active: Optional[bool] = None
    authorization_header: Optional[str] = None
    branch_filter: Optional[str] = None
    config: Optional[Dict[str, str]] = None
    events: Optional[List[str]] = None


class EditIssueCommentOption(BaseModel):
    body: str


class EditIssueOption(BaseModel):
    assignee: Optional[str] = Field(None, description='deprecated')
    assignees: Optional[List[str]] = None
    body: Optional[str] = None
    due_date: Optional[datetime] = None
    milestone: Optional[int] = None
    ref: Optional[str] = None
    state: Optional[str] = None
    title: Optional[str] = None
    unset_due_date: Optional[bool] = None


class EditLabelOption(BaseModel):
    color: Optional[str] = Field(None, examples=['#00aabb'])
    description: Optional[str] = None
    exclusive: Optional[bool] = Field(None, examples=[False])
    name: Optional[str] = None


class EditMilestoneOption(BaseModel):
    description: Optional[str] = None
    due_on: Optional[datetime] = None
    state: Optional[str] = None
    title: Optional[str] = None


class EditOrgOption(BaseModel):
    description: Optional[str] = None
    full_name: Optional[str] = None
    location: Optional[str] = None
    repo_admin_change_team_access: Optional[bool] = None
    visibility: Optional[Visibility] = Field(
        None, description='possible values are `public`, `limited` or `private`'
    )
    website: Optional[str] = None


class EditPullRequestOption(BaseModel):
    allow_maintainer_edit: Optional[bool] = None
    assignee: Optional[str] = None
    assignees: Optional[List[str]] = None
    base: Optional[str] = None
    body: Optional[str] = None
    due_date: Optional[datetime] = None
    labels: Optional[List[int]] = None
    milestone: Optional[int] = None
    state: Optional[str] = None
    title: Optional[str] = None
    unset_due_date: Optional[bool] = None


class EditReactionOption(BaseModel):
    content: Optional[str] = None


class EditReleaseOption(BaseModel):
    body: Optional[str] = None
    draft: Optional[bool] = None
    name: Optional[str] = None
    prerelease: Optional[bool] = None
    tag_name: Optional[str] = None
    target_commitish: Optional[str] = None


class EditTeamOption(BaseModel):
    can_create_org_repo: Optional[bool] = None
    description: Optional[str] = None
    includes_all_repositories: Optional[bool] = None
    name: str
    permission: Optional[Permission] = None
    units: Optional[List[str]] = Field(
        None,
        examples=[
            [
                'repo.code',
                'repo.issues',
                'repo.ext_issues',
                'repo.wiki',
                'repo.pulls',
                'repo.releases',
                'repo.projects',
                'repo.ext_wiki',
            ]
        ],
    )
    units_map: Optional[Dict[str, str]] = Field(
        None,
        examples=[
            {
                'repo.code': 'read',
                'repo.ext_issues': 'none',
                'repo.ext_wiki': 'none',
                'repo.issues': 'write',
                'repo.projects': 'none',
                'repo.pulls': 'owner',
                'repo.releases': 'none',
                'repo.wiki': 'admin',
            }
        ],
    )


class EditUserOption(BaseModel):
    active: Optional[bool] = None
    admin: Optional[bool] = None
    allow_create_organization: Optional[bool] = None
    allow_git_hook: Optional[bool] = None
    allow_import_local: Optional[bool] = None
    description: Optional[str] = None
    email: Optional[EmailStr] = None
    full_name: Optional[str] = None
    location: Optional[str] = None
    login_name: str
    max_repo_creation: Optional[int] = None
    must_change_password: Optional[bool] = None
    password: Optional[str] = None
    prohibit_login: Optional[bool] = None
    restricted: Optional[bool] = None
    source_id: int
    visibility: Optional[str] = None
    website: Optional[str] = None


class Email(BaseModel):
    email: Optional[EmailStr] = None
    primary: Optional[bool] = None
    verified: Optional[bool] = None


class ExternalTracker(BaseModel):
    external_tracker_format: Optional[str] = Field(
        None,
        description='External Issue Tracker URL Format. Use the placeholders {user}, {repo} and {index} for the username, repository name and issue index.',
    )
    external_tracker_regexp_pattern: Optional[str] = Field(
        None, description='External Issue Tracker issue regular expression'
    )
    external_tracker_style: Optional[str] = Field(
        None,
        description='External Issue Tracker Number Format, either `numeric`, `alphanumeric`, or `regexp`',
    )
    external_tracker_url: Optional[str] = Field(
        None, description='URL of external issue tracker.'
    )


class ExternalWiki(BaseModel):
    external_wiki_url: Optional[str] = Field(None, description='URL of external wiki.')


class FileCommitResponse(BaseModel):
    author: Optional[CommitUser] = None
    committer: Optional[CommitUser] = None
    created: Optional[datetime] = None
    html_url: Optional[str] = None
    message: Optional[str] = None
    parents: Optional[List[CommitMeta]] = None
    sha: Optional[str] = None
    tree: Optional[CommitMeta] = None
    url: Optional[str] = None


class FileLinksResponse(BaseModel):
    git: Optional[str] = None
    html: Optional[str] = None
    self: Optional[str] = None


class GPGKeyEmail(BaseModel):
    email: Optional[str] = None
    verified: Optional[bool] = None


class GeneralAPISettings(BaseModel):
    default_git_trees_per_page: Optional[int] = None
    default_max_blob_size: Optional[int] = None
    default_paging_num: Optional[int] = None
    max_response_items: Optional[int] = None


class GeneralAttachmentSettings(BaseModel):
    allowed_types: Optional[str] = None
    enabled: Optional[bool] = None
    max_files: Optional[int] = None
    max_size: Optional[int] = None


class GeneralRepoSettings(BaseModel):
    http_git_disabled: Optional[bool] = None
    lfs_disabled: Optional[bool] = None
    migrations_disabled: Optional[bool] = None
    mirrors_disabled: Optional[bool] = None
    stars_disabled: Optional[bool] = None
    time_tracking_disabled: Optional[bool] = None


class GeneralUISettings(BaseModel):
    allowed_reactions: Optional[List[str]] = None
    custom_emojis: Optional[List[str]] = None
    default_theme: Optional[str] = None


class GenerateRepoOption(BaseModel):
    avatar: Optional[bool] = Field(
        None, description='include avatar of the template repo'
    )
    default_branch: Optional[str] = Field(
        None, description='Default branch of the new repository'
    )
    description: Optional[str] = Field(
        None, description='Description of the repository to create'
    )
    git_content: Optional[bool] = Field(
        None, description='include git content of default branch in template repo'
    )
    git_hooks: Optional[bool] = Field(
        None, description='include git hooks in template repo'
    )
    labels: Optional[bool] = Field(None, description='include labels in template repo')
    name: str = Field(..., description='Name of the repository to create')
    owner: str = Field(
        ..., description='The organization or person who will own the new repository'
    )
    private: Optional[bool] = Field(
        None, description='Whether the repository is private'
    )
    topics: Optional[bool] = Field(None, description='include topics in template repo')
    webhooks: Optional[bool] = Field(
        None, description='include webhooks in template repo'
    )


class GitBlobResponse(BaseModel):
    content: Optional[str] = None
    encoding: Optional[str] = None
    sha: Optional[str] = None
    size: Optional[int] = None
    url: Optional[str] = None


class GitEntry(BaseModel):
    mode: Optional[str] = None
    path: Optional[str] = None
    sha: Optional[str] = None
    size: Optional[int] = None
    type: Optional[str] = None
    url: Optional[str] = None


class GitHook(BaseModel):
    content: Optional[str] = None
    is_active: Optional[bool] = None
    name: Optional[str] = None


class GitObject(BaseModel):
    sha: Optional[str] = None
    type: Optional[str] = None
    url: Optional[str] = None


class GitTreeResponse(BaseModel):
    page: Optional[int] = None
    sha: Optional[str] = None
    total_count: Optional[int] = None
    tree: Optional[List[GitEntry]] = None
    truncated: Optional[bool] = None
    url: Optional[str] = None


class Hook(BaseModel):
    active: Optional[bool] = None
    authorization_header: Optional[str] = None
    config: Optional[Dict[str, str]] = None
    created_at: Optional[datetime] = None
    events: Optional[List[str]] = None
    id: Optional[int] = None
    type: Optional[str] = None
    updated_at: Optional[datetime] = None


class Identity(BaseModel):
    email: Optional[EmailStr] = None
    name: Optional[str] = None


class InternalTracker(BaseModel):
    allow_only_contributors_to_track_time: Optional[bool] = Field(
        None, description='Let only contributors track time (Built-in issue tracker)'
    )
    enable_issue_dependencies: Optional[bool] = Field(
        None,
        description='Enable dependencies for issues and pull requests (Built-in issue tracker)',
    )
    enable_time_tracker: Optional[bool] = Field(
        None, description='Enable time tracking (Built-in issue tracker)'
    )


class IssueDeadline(BaseModel):
    due_date: Optional[datetime] = None


class IssueFormFieldType(RootModel[str]):
    root: str = Field(
        ...,
        title='IssueFormFieldType defines issue form field type, can be "markdown", "textarea", "input", "dropdown" or "checkboxes"',
    )


class IssueLabelsOption(BaseModel):
    labels: Optional[List[int]] = Field(None, description='list of label IDs')


class IssueTemplateLabels(RootModel[List[str]]):
    root: List[str]


class Label(BaseModel):
    color: Optional[str] = Field(None, examples=['00aabb'])
    description: Optional[str] = None
    exclusive: Optional[bool] = Field(None, examples=[False])
    id: Optional[int] = None
    name: Optional[str] = None
    url: Optional[str] = None


class MarkdownOption(BaseModel):
    Context: Optional[str] = Field(None, description='Context to render\n\nin: body')
    Mode: Optional[str] = Field(None, description='Mode to render\n\nin: body')
    Text: Optional[str] = Field(None, description='Text markdown to render\n\nin: body')
    Wiki: Optional[bool] = Field(None, description='Is it a wiki page ?\n\nin: body')


class Do(Enum):
    merge = 'merge'
    rebase = 'rebase'
    rebase_merge = 'rebase-merge'
    squash = 'squash'
    manually_merged = 'manually-merged'


class MergePullRequestOption(BaseModel):
    Do_1: Do = Field(..., alias='Do')
    MergeCommitID: Optional[str] = None
    MergeMessageField: Optional[str] = None
    MergeTitleField: Optional[str] = None
    delete_branch_after_merge: Optional[bool] = None
    force_merge: Optional[bool] = None
    head_commit_id: Optional[str] = None
    merge_when_checks_succeed: Optional[bool] = None


class Service(Enum):
    git = 'git'
    github = 'github'
    gitea = 'gitea'
    gitlab = 'gitlab'


class MigrateRepoOptions(BaseModel):
    auth_password: Optional[str] = None
    auth_token: Optional[str] = None
    auth_username: Optional[str] = None
    clone_addr: str
    description: Optional[str] = None
    issues: Optional[bool] = None
    labels: Optional[bool] = None
    lfs: Optional[bool] = None
    lfs_endpoint: Optional[str] = None
    milestones: Optional[bool] = None
    mirror: Optional[bool] = None
    mirror_interval: Optional[str] = None
    private: Optional[bool] = None
    pull_requests: Optional[bool] = None
    releases: Optional[bool] = None
    repo_name: str
    repo_owner: Optional[str] = Field(
        None,
        description='Name of User or Organisation who will own Repo after migration',
    )
    service: Optional[Service] = None
    uid: Optional[int] = Field(
        None, description='deprecated (only for backwards compatibility)'
    )
    wiki: Optional[bool] = None


class NodeInfoServices(BaseModel):
    inbound: Optional[List[str]] = None
    outbound: Optional[List[str]] = None


class NodeInfoSoftware(BaseModel):
    homepage: Optional[str] = None
    name: Optional[str] = None
    repository: Optional[str] = None
    version: Optional[str] = None


class NodeInfoUsageUsers(BaseModel):
    activeHalfyear: Optional[int] = None
    activeMonth: Optional[int] = None
    total: Optional[int] = None


class NotificationCount(BaseModel):
    new: Optional[int] = None


class NotifySubjectType(RootModel[str]):
    root: str = Field(
        ..., description='NotifySubjectType represent type of notification subject'
    )


class OAuth2Application(BaseModel):
    client_id: Optional[str] = None
    client_secret: Optional[str] = None
    confidential_client: Optional[bool] = None
    created: Optional[datetime] = None
    id: Optional[int] = None
    name: Optional[str] = None
    redirect_uris: Optional[List[str]] = None


class Organization(BaseModel):
    avatar_url: Optional[str] = None
    description: Optional[str] = None
    full_name: Optional[str] = None
    id: Optional[int] = None
    location: Optional[str] = None
    name: Optional[str] = None
    repo_admin_change_team_access: Optional[bool] = None
    username: Optional[str] = Field(None, description='deprecated')
    visibility: Optional[str] = None
    website: Optional[str] = None


class OrganizationPermissions(BaseModel):
    can_create_repository: Optional[bool] = None
    can_read: Optional[bool] = None
    can_write: Optional[bool] = None
    is_admin: Optional[bool] = None
    is_owner: Optional[bool] = None


class PackageFile(BaseModel):
    Size: Optional[int] = None
    id: Optional[int] = None
    md5: Optional[str] = None
    name: Optional[str] = None
    sha1: Optional[str] = None
    sha256: Optional[str] = None
    sha512: Optional[str] = None


class PayloadUser(BaseModel):
    email: Optional[EmailStr] = None
    name: Optional[str] = Field(None, description='Full name of the commit author')
    username: Optional[str] = None


class Permission2(BaseModel):
    admin: Optional[bool] = None
    pull: Optional[bool] = None
    push: Optional[bool] = None


class PullRequestMeta(BaseModel):
    merged: Optional[bool] = None
    merged_at: Optional[datetime] = None


class PullReviewRequestOptions(BaseModel):
    reviewers: Optional[List[str]] = None
    team_reviewers: Optional[List[str]] = None


class PushMirror(BaseModel):
    created: Optional[str] = None
    interval: Optional[str] = None
    last_error: Optional[str] = None
    last_update: Optional[str] = None
    remote_address: Optional[str] = None
    remote_name: Optional[str] = None
    repo_name: Optional[str] = None
    sync_on_commit: Optional[bool] = None


class Reference(BaseModel):
    object: Optional[GitObject] = None
    ref: Optional[str] = None
    url: Optional[str] = None


class RepoTopicOptions(BaseModel):
    topics: Optional[List[str]] = Field(None, description='list of topic names')


class RepositoryMeta(BaseModel):
    full_name: Optional[str] = None
    id: Optional[int] = None
    name: Optional[str] = None
    owner: Optional[str] = None


class ReviewStateType(RootModel[str]):
    root: str = Field(..., description='ReviewStateType review state type')


class ServerVersion(BaseModel):
    version: Optional[str] = None


class StateType(RootModel[str]):
    root: str = Field(..., description='StateType issue state type')


class StopWatch(BaseModel):
    created: Optional[datetime] = None
    duration: Optional[str] = None
    issue_index: Optional[int] = None
    issue_title: Optional[str] = None
    repo_name: Optional[str] = None
    repo_owner_name: Optional[str] = None
    seconds: Optional[int] = None


class SubmitPullReviewOptions(BaseModel):
    body: Optional[str] = None
    event: Optional[ReviewStateType] = None


class Tag(BaseModel):
    commit: Optional[CommitMeta] = None
    id: Optional[str] = None
    message: Optional[str] = None
    name: Optional[str] = None
    tarball_url: Optional[str] = None
    zipball_url: Optional[str] = None


class Permission3(Enum):
    none = 'none'
    read = 'read'
    write = 'write'
    admin = 'admin'
    owner = 'owner'


class Team(BaseModel):
    can_create_org_repo: Optional[bool] = None
    description: Optional[str] = None
    id: Optional[int] = None
    includes_all_repositories: Optional[bool] = None
    name: Optional[str] = None
    organization: Optional[Organization] = None
    permission: Optional[Permission3] = None
    units: Optional[List[str]] = Field(
        None,
        examples=[
            [
                'repo.code',
                'repo.issues',
                'repo.ext_issues',
                'repo.wiki',
                'repo.pulls',
                'repo.releases',
                'repo.projects',
                'repo.ext_wiki',
            ]
        ],
    )
    units_map: Optional[Dict[str, str]] = Field(
        None,
        examples=[
            {
                'repo.code': 'read',
                'repo.ext_issues': 'none',
                'repo.ext_wiki': 'none',
                'repo.issues': 'write',
                'repo.projects': 'none',
                'repo.pulls': 'owner',
                'repo.releases': 'none',
                'repo.wiki': 'admin',
            }
        ],
    )


class TimeStamp(RootModel[int]):
    root: int = Field(..., description='TimeStamp defines a timestamp')


class TopicName(BaseModel):
    topics: Optional[List[str]] = None


class TopicResponse(BaseModel):
    created: Optional[datetime] = None
    id: Optional[int] = None
    repo_count: Optional[int] = None
    topic_name: Optional[str] = None
    updated: Optional[datetime] = None


class TransferRepoOption(BaseModel):
    new_owner: str
    team_ids: Optional[List[int]] = Field(
        None,
        description='ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.',
    )


class UpdateFileOptions(BaseModel):
    author: Optional[Identity] = None
    branch: Optional[str] = Field(
        None,
        description='branch (optional) to base this file from. if not given, the default branch is used',
    )
    committer: Optional[Identity] = None
    content: str = Field(..., description='content must be base64 encoded')
    dates: Optional[CommitDateOptions] = None
    from_path: Optional[str] = Field(
        None,
        description='from_path (optional) is the path of the original file which will be moved/renamed to the path in the URL',
    )
    message: Optional[str] = Field(
        None,
        description='message (optional) for the commit of this file. if not supplied, a default message will be used',
    )
    new_branch: Optional[str] = Field(
        None,
        description='new_branch (optional) will make a new branch from `branch` before creating the file',
    )
    sha: str = Field(..., description='sha is the SHA for the file that already exists')
    signoff: Optional[bool] = Field(
        None,
        description='Add a Signed-off-by trailer by the committer at the end of the commit log message.',
    )


class User(BaseModel):
    active: Optional[bool] = Field(None, description='Is user active')
    avatar_url: Optional[str] = Field(None, description="URL to the user's avatar")
    created: Optional[datetime] = None
    description: Optional[str] = Field(None, description="the user's description")
    email: Optional[EmailStr] = None
    followers_count: Optional[int] = Field(None, description='user counts')
    following_count: Optional[int] = None
    full_name: Optional[str] = Field(None, description="the user's full name")
    id: Optional[int] = Field(None, description="the user's id")
    is_admin: Optional[bool] = Field(None, description='Is the user an administrator')
    language: Optional[str] = Field(None, description='User locale')
    last_login: Optional[datetime] = None
    location: Optional[str] = Field(None, description="the user's location")
    login: Optional[str] = Field(None, description="the user's username")
    login_name: Optional[str] = Field(
        'empty', description="the user's authentication sign-in name."
    )
    prohibit_login: Optional[bool] = Field(None, description='Is user login prohibited')
    restricted: Optional[bool] = Field(None, description='Is user restricted')
    starred_repos_count: Optional[int] = None
    visibility: Optional[str] = Field(
        None, description='User visibility level option: public, limited, private'
    )
    website: Optional[str] = Field(None, description="the user's website")


class UserHeatmapData(BaseModel):
    contributions: Optional[int] = None
    timestamp: Optional[TimeStamp] = None


class UserSettings(BaseModel):
    description: Optional[str] = None
    diff_view_style: Optional[str] = None
    full_name: Optional[str] = None
    hide_activity: Optional[bool] = None
    hide_email: Optional[bool] = Field(None, description='Privacy')
    language: Optional[str] = None
    location: Optional[str] = None
    theme: Optional[str] = None
    website: Optional[str] = None


class UserSettingsOptions(BaseModel):
    description: Optional[str] = None
    diff_view_style: Optional[str] = None
    full_name: Optional[str] = None
    hide_activity: Optional[bool] = None
    hide_email: Optional[bool] = Field(None, description='Privacy')
    language: Optional[str] = None
    location: Optional[str] = None
    theme: Optional[str] = None
    website: Optional[str] = None


class WatchInfo(BaseModel):
    created_at: Optional[datetime] = None
    ignored: Optional[bool] = None
    reason: Optional[Any] = None
    repository_url: Optional[str] = None
    subscribed: Optional[bool] = None
    url: Optional[str] = None


class WikiCommit(BaseModel):
    author: Optional[CommitUser] = None
    commiter: Optional[CommitUser] = None
    message: Optional[str] = None
    sha: Optional[str] = None


class WikiCommitList(BaseModel):
    commits: Optional[List[WikiCommit]] = None
    count: Optional[int] = None


class WikiPage(BaseModel):
    commit_count: Optional[int] = None
    content_base64: Optional[str] = Field(
        None, description='Page content, base64 encoded'
    )
    footer: Optional[str] = None
    html_url: Optional[str] = None
    last_commit: Optional[WikiCommit] = None
    sidebar: Optional[str] = None
    sub_url: Optional[str] = None
    title: Optional[str] = None


class WikiPageMetaData(BaseModel):
    html_url: Optional[str] = None
    last_commit: Optional[WikiCommit] = None
    sub_url: Optional[str] = None
    title: Optional[str] = None


class AdminCronGetResponse(RootModel[List[Cron]]):
    root: List[Cron]


class AdminHooksGetResponse(RootModel[List[Hook]]):
    root: List[Hook]


class AdminOrgsGetResponse(RootModel[List[Organization]]):
    root: List[Organization]


class AdminUnadoptedGetResponse(RootModel[List[str]]):
    root: List[str]


class AdminUsersGetResponse(RootModel[List[User]]):
    root: List[User]


class SubjectTypeEnum(Enum):
    issue = 'issue'
    pull = 'pull'
    commit = 'commit'
    repository = 'repository'


class StatusTypes(RootModel[List[str]]):
    root: List[str]


class SubjectType(RootModel[List[SubjectTypeEnum]]):
    root: List[SubjectTypeEnum]


class OrgsGetResponse(RootModel[List[Organization]]):
    root: List[Organization]


class OrgsOrgHooksGetResponse(RootModel[List[Hook]]):
    root: List[Hook]


class OrgsOrgLabelsGetResponse(RootModel[List[Label]]):
    root: List[Label]


class OrgsOrgMembersGetResponse(RootModel[List[User]]):
    root: List[User]


class OrgsOrgPublicMembersGetResponse(RootModel[List[User]]):
    root: List[User]


class OrgsOrgTeamsGetResponse(RootModel[List[Team]]):
    root: List[Team]


class OrgsOrgTeamsSearchGetResponse(BaseModel):
    data: Optional[List[Team]] = None
    ok: Optional[bool] = None


class Type1(Enum):
    cargo = 'cargo'
    chef = 'chef'
    composer = 'composer'
    conan = 'conan'
    conda = 'conda'
    container = 'container'
    generic = 'generic'
    helm = 'helm'
    maven = 'maven'
    npm = 'npm'
    nuget = 'nuget'
    pub = 'pub'
    pypi = 'pypi'
    rubygems = 'rubygems'
    vagrant = 'vagrant'


class PackagesOwnerTypeNameVersionFilesGetResponse(RootModel[List[PackageFile]]):
    root: List[PackageFile]


class ReposOwnerRepoAssigneesGetResponse(RootModel[List[User]]):
    root: List[User]


class ReposOwnerRepoBranchProtectionsGetResponse(RootModel[List[BranchProtection]]):
    root: List[BranchProtection]


class ReposOwnerRepoCollaboratorsGetResponse(RootModel[List[User]]):
    root: List[User]


class Sort(Enum):
    oldest = 'oldest'
    recentupdate = 'recentupdate'
    leastupdate = 'leastupdate'
    leastindex = 'leastindex'
    highestindex = 'highestindex'


class State1(Enum):
    pending = 'pending'
    success = 'success'
    error = 'error'
    failure = 'failure'
    warning = 'warning'


class DiffType(Enum):
    diff = 'diff'
    patch = 'patch'


class ReposOwnerRepoGitRefsGetResponse(RootModel[List[Reference]]):
    root: List[Reference]


class ReposOwnerRepoGitRefsRefGetResponse(RootModel[List[Reference]]):
    root: List[Reference]


class ReposOwnerRepoHooksGetResponse(RootModel[List[Hook]]):
    root: List[Hook]


class ReposOwnerRepoHooksGitGetResponse(RootModel[List[GitHook]]):
    root: List[GitHook]


class State3(Enum):
    closed = 'closed'
    open = 'open'
    all = 'all'


class Type3(Enum):
    issues = 'issues'
    pulls = 'pulls'


class ReposOwnerRepoIssuesCommentsIdAssetsGetResponse(RootModel[List[Attachment]]):
    root: List[Attachment]


class ReposOwnerRepoIssuesCommentsIdAssetsPostRequest(BaseModel):
    attachment: bytes = Field(..., description='attachment to upload')


class ReposOwnerRepoIssuesIndexAssetsGetResponse(RootModel[List[Attachment]]):
    root: List[Attachment]


class ReposOwnerRepoIssuesIndexAssetsPostRequest(BaseModel):
    attachment: bytes = Field(..., description='attachment to upload')


class ReposOwnerRepoIssuesIndexLabelsGetResponse(RootModel[List[Label]]):
    root: List[Label]


class ReposOwnerRepoIssuesIndexLabelsPostResponse(RootModel[List[Label]]):
    root: List[Label]


class ReposOwnerRepoIssuesIndexLabelsPutResponse(RootModel[List[Label]]):
    root: List[Label]


class ReposOwnerRepoIssuesIndexSubscriptionsGetResponse(RootModel[List[User]]):
    root: List[User]


class ReposOwnerRepoLabelsGetResponse(RootModel[List[Label]]):
    root: List[Label]


class ReposOwnerRepoLanguagesGetResponse(RootModel[Optional[Dict[str, int]]]):
    root: Optional[Dict[str, int]] = None


class SubjectType1(RootModel[List[SubjectTypeEnum]]):
    root: List[SubjectTypeEnum]


class Sort2(Enum):
    oldest = 'oldest'
    recentupdate = 'recentupdate'
    leastupdate = 'leastupdate'
    mostcomment = 'mostcomment'
    leastcomment = 'leastcomment'
    priority = 'priority'


class Labels(RootModel[List[int]]):
    root: List[int]


class Whitespace(Enum):
    ignore_all = 'ignore-all'
    ignore_change = 'ignore-change'
    ignore_eol = 'ignore-eol'
    show_all = 'show-all'


class ReposOwnerRepoPullsIndexFilesGetResponse(RootModel[List[ChangedFile]]):
    root: List[ChangedFile]


class Style(Enum):
    merge = 'merge'
    rebase = 'rebase'


class ReposOwnerRepoPushMirrorsGetResponse(RootModel[List[PushMirror]]):
    root: List[PushMirror]


class ReposOwnerRepoReleasesIdAssetsGetResponse(RootModel[List[Attachment]]):
    root: List[Attachment]


class ReposOwnerRepoReleasesIdAssetsPostRequest(BaseModel):
    attachment: bytes = Field(..., description='attachment to upload')


class ReposOwnerRepoReviewersGetResponse(RootModel[List[User]]):
    root: List[User]


class ReposOwnerRepoStargazersGetResponse(RootModel[List[User]]):
    root: List[User]


class Sort4(Enum):
    oldest = 'oldest'
    recentupdate = 'recentupdate'
    leastupdate = 'leastupdate'
    leastindex = 'leastindex'
    highestindex = 'highestindex'


class State7(Enum):
    pending = 'pending'
    success = 'success'
    error = 'error'
    failure = 'failure'
    warning = 'warning'


class ReposOwnerRepoSubscribersGetResponse(RootModel[List[User]]):
    root: List[User]


class ReposOwnerRepoTagsGetResponse(RootModel[List[Tag]]):
    root: List[Tag]


class ReposOwnerRepoTeamsGetResponse(RootModel[List[Team]]):
    root: List[Team]


class ReposOwnerRepoWikiPagesGetResponse(RootModel[List[WikiPageMetaData]]):
    root: List[WikiPageMetaData]


class TeamsIdMembersGetResponse(RootModel[List[User]]):
    root: List[User]


class TopicsSearchGetResponse(RootModel[List[TopicResponse]]):
    root: List[TopicResponse]


class UserApplicationsOauth2GetResponse(RootModel[List[OAuth2Application]]):
    root: List[OAuth2Application]


class UserEmailsGetResponse(RootModel[List[Email]]):
    root: List[Email]


class UserEmailsPostResponse(RootModel[List[Email]]):
    root: List[Email]


class UserFollowersGetResponse(RootModel[List[User]]):
    root: List[User]


class UserFollowingGetResponse(RootModel[List[User]]):
    root: List[User]


class UserOrgsGetResponse(RootModel[List[Organization]]):
    root: List[Organization]


class UserSettingsGetResponse(RootModel[List[UserSettings]]):
    root: List[UserSettings]


class UserSettingsPatchResponse(RootModel[List[UserSettings]]):
    root: List[UserSettings]


class UserStopwatchesGetResponse(RootModel[List[StopWatch]]):
    root: List[StopWatch]


class UserTeamsGetResponse(RootModel[List[Team]]):
    root: List[Team]


class UsersSearchGetResponse(BaseModel):
    data: Optional[List[User]] = None
    ok: Optional[bool] = None


class UsersUsernameFollowersGetResponse(RootModel[List[User]]):
    root: List[User]


class UsersUsernameFollowingGetResponse(RootModel[List[User]]):
    root: List[User]


class UsersUsernameHeatmapGetResponse(RootModel[List[UserHeatmapData]]):
    root: List[UserHeatmapData]


class UsersUsernameOrgsGetResponse(RootModel[List[Organization]]):
    root: List[Organization]


class UsersUsernameTokensGetResponse(RootModel[List[AccessToken]]):
    root: List[AccessToken]


class Comment(BaseModel):
    assets: Optional[List[Attachment]] = None
    body: Optional[str] = None
    created_at: Optional[datetime] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    issue_url: Optional[str] = None
    original_author: Optional[str] = None
    original_author_id: Optional[int] = None
    pull_request_url: Optional[str] = None
    updated_at: Optional[datetime] = None
    user: Optional[User] = None


class CommitStatus(BaseModel):
    context: Optional[str] = None
    created_at: Optional[datetime] = None
    creator: Optional[User] = None
    description: Optional[str] = None
    id: Optional[int] = None
    status: Optional[CommitStatusState] = None
    target_url: Optional[str] = None
    updated_at: Optional[datetime] = None
    url: Optional[str] = None


class ContentsResponse(BaseModel):
    field_links: Optional[FileLinksResponse] = Field(None, alias='_links')
    content: Optional[str] = Field(
        None, description='`content` is populated when `type` is `file`, otherwise null'
    )
    download_url: Optional[str] = None
    encoding: Optional[str] = Field(
        None,
        description='`encoding` is populated when `type` is `file`, otherwise null',
    )
    git_url: Optional[str] = None
    html_url: Optional[str] = None
    last_commit_sha: Optional[str] = None
    name: Optional[str] = None
    path: Optional[str] = None
    sha: Optional[str] = None
    size: Optional[int] = None
    submodule_git_url: Optional[str] = Field(
        None,
        description='`submodule_git_url` is populated when `type` is `submodule`, otherwise null',
    )
    target: Optional[str] = Field(
        None,
        description='`target` is populated when `type` is `symlink`, otherwise null',
    )
    type: Optional[str] = Field(
        None, description='`type` will be `file`, `dir`, `symlink`, or `submodule`'
    )
    url: Optional[str] = None


class CreateFileOptions(BaseModel):
    author: Optional[Identity] = None
    branch: Optional[str] = Field(
        None,
        description='branch (optional) to base this file from. if not given, the default branch is used',
    )
    committer: Optional[Identity] = None
    content: str = Field(..., description='content must be base64 encoded')
    dates: Optional[CommitDateOptions] = None
    message: Optional[str] = Field(
        None,
        description='message (optional) for the commit of this file. if not supplied, a default message will be used',
    )
    new_branch: Optional[str] = Field(
        None,
        description='new_branch (optional) will make a new branch from `branch` before creating the file',
    )
    signoff: Optional[bool] = Field(
        None,
        description='Add a Signed-off-by trailer by the committer at the end of the commit log message.',
    )


class CreateHookOption(BaseModel):
    active: Optional[bool] = False
    authorization_header: Optional[str] = None
    branch_filter: Optional[str] = None
    config: CreateHookOptionConfig
    events: Optional[List[str]] = None
    type: Type


class CreatePullReviewOptions(BaseModel):
    body: Optional[str] = None
    comments: Optional[List[CreatePullReviewComment]] = None
    commit_id: Optional[str] = None
    event: Optional[ReviewStateType] = None


class DeleteFileOptions(BaseModel):
    author: Optional[Identity] = None
    branch: Optional[str] = Field(
        None,
        description='branch (optional) to base this file from. if not given, the default branch is used',
    )
    committer: Optional[Identity] = None
    dates: Optional[CommitDateOptions] = None
    message: Optional[str] = Field(
        None,
        description='message (optional) for the commit of this file. if not supplied, a default message will be used',
    )
    new_branch: Optional[str] = Field(
        None,
        description='new_branch (optional) will make a new branch from `branch` before creating the file',
    )
    sha: str = Field(..., description='sha is the SHA for the file that already exists')
    signoff: Optional[bool] = Field(
        None,
        description='Add a Signed-off-by trailer by the committer at the end of the commit log message.',
    )


class EditRepoOption(BaseModel):
    allow_manual_merge: Optional[bool] = Field(
        None,
        description='either `true` to allow mark pr as merged manually, or `false` to prevent it.',
    )
    allow_merge_commits: Optional[bool] = Field(
        None,
        description='either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.',
    )
    allow_rebase: Optional[bool] = Field(
        None,
        description='either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.',
    )
    allow_rebase_explicit: Optional[bool] = Field(
        None,
        description='either `true` to allow rebase with explicit merge commits (--no-ff), or `false` to prevent rebase with explicit merge commits.',
    )
    allow_rebase_update: Optional[bool] = Field(
        None,
        description='either `true` to allow updating pull request branch by rebase, or `false` to prevent it.',
    )
    allow_squash_merge: Optional[bool] = Field(
        None,
        description='either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.',
    )
    archived: Optional[bool] = Field(
        None, description='set to `true` to archive this repository.'
    )
    autodetect_manual_merge: Optional[bool] = Field(
        None,
        description='either `true` to enable AutodetectManualMerge, or `false` to prevent it. Note: In some special cases, misjudgments can occur.',
    )
    default_allow_maintainer_edit: Optional[bool] = Field(
        None, description='set to `true` to allow edits from maintainers by default'
    )
    default_branch: Optional[str] = Field(
        None, description='sets the default branch for this repository.'
    )
    default_delete_branch_after_merge: Optional[bool] = Field(
        None, description='set to `true` to delete pr branch after merge by default'
    )
    default_merge_style: Optional[str] = Field(
        None,
        description='set to a merge style to be used by this repository: "merge", "rebase", "rebase-merge", or "squash".',
    )
    description: Optional[str] = Field(
        None, description='a short description of the repository.'
    )
    enable_prune: Optional[bool] = Field(
        None, description='enable prune - remove obsolete remote-tracking references'
    )
    external_tracker: Optional[ExternalTracker] = None
    external_wiki: Optional[ExternalWiki] = None
    has_issues: Optional[bool] = Field(
        None,
        description='either `true` to enable issues for this repository or `false` to disable them.',
    )
    has_projects: Optional[bool] = Field(
        None,
        description='either `true` to enable project unit, or `false` to disable them.',
    )
    has_pull_requests: Optional[bool] = Field(
        None,
        description='either `true` to allow pull requests, or `false` to prevent pull request.',
    )
    has_wiki: Optional[bool] = Field(
        None,
        description='either `true` to enable the wiki for this repository or `false` to disable it.',
    )
    ignore_whitespace_conflicts: Optional[bool] = Field(
        None,
        description='either `true` to ignore whitespace for conflicts, or `false` to not ignore whitespace.',
    )
    internal_tracker: Optional[InternalTracker] = None
    mirror_interval: Optional[str] = Field(
        None,
        description='set to a string like `8h30m0s` to set the mirror interval time',
    )
    name: Optional[str] = Field(None, description='name of the repository')
    private: Optional[bool] = Field(
        None,
        description='either `true` to make the repository private or `false` to make it public.\nNote: you will get a 422 error if the organization restricts changing repository visibility to organization\nowners and a non-owner tries to change the value of private.',
    )
    template: Optional[bool] = Field(
        None,
        description='either `true` to make this repository a template or `false` to make it a normal repository',
    )
    website: Optional[str] = Field(
        None, description='a URL with more information about the repository.'
    )


class GPGKey(BaseModel):
    can_certify: Optional[bool] = None
    can_encrypt_comms: Optional[bool] = None
    can_encrypt_storage: Optional[bool] = None
    can_sign: Optional[bool] = None
    created_at: Optional[datetime] = None
    emails: Optional[List[GPGKeyEmail]] = None
    expires_at: Optional[datetime] = None
    id: Optional[int] = None
    key_id: Optional[str] = None
    primary_key_id: Optional[str] = None
    public_key: Optional[str] = None
    subkeys: Optional[List[GPGKey]] = None
    verified: Optional[bool] = None


class IssueFormField(BaseModel):
    attributes: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    type: Optional[IssueFormFieldType] = None
    validations: Optional[Dict[str, Any]] = None


class IssueTemplate(BaseModel):
    about: Optional[str] = None
    body: Optional[List[IssueFormField]] = None
    content: Optional[str] = None
    file_name: Optional[str] = None
    labels: Optional[IssueTemplateLabels] = None
    name: Optional[str] = None
    ref: Optional[str] = None
    title: Optional[str] = None


class Milestone(BaseModel):
    closed_at: Optional[datetime] = None
    closed_issues: Optional[int] = None
    created_at: Optional[datetime] = None
    description: Optional[str] = None
    due_on: Optional[datetime] = None
    id: Optional[int] = None
    open_issues: Optional[int] = None
    state: Optional[StateType] = None
    title: Optional[str] = None
    updated_at: Optional[datetime] = None


class NodeInfoUsage(BaseModel):
    localComments: Optional[int] = None
    localPosts: Optional[int] = None
    users: Optional[NodeInfoUsageUsers] = None


class NotificationSubject(BaseModel):
    html_url: Optional[str] = None
    latest_comment_html_url: Optional[str] = None
    latest_comment_url: Optional[str] = None
    state: Optional[StateType] = None
    title: Optional[str] = None
    type: Optional[NotifySubjectType] = None
    url: Optional[str] = None


class PayloadCommitVerification(BaseModel):
    payload: Optional[str] = None
    reason: Optional[str] = None
    signature: Optional[str] = None
    signer: Optional[PayloadUser] = None
    verified: Optional[bool] = None


class PublicKey(BaseModel):
    created_at: Optional[datetime] = None
    fingerprint: Optional[str] = None
    id: Optional[int] = None
    key: Optional[str] = None
    key_type: Optional[str] = None
    read_only: Optional[bool] = None
    title: Optional[str] = None
    url: Optional[str] = None
    user: Optional[User] = None


class PullReview(BaseModel):
    body: Optional[str] = None
    comments_count: Optional[int] = None
    commit_id: Optional[str] = None
    dismissed: Optional[bool] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    official: Optional[bool] = None
    pull_request_url: Optional[str] = None
    stale: Optional[bool] = None
    state: Optional[ReviewStateType] = None
    submitted_at: Optional[datetime] = None
    team: Optional[Team] = None
    updated_at: Optional[datetime] = None
    user: Optional[User] = None


class PullReviewComment(BaseModel):
    body: Optional[str] = None
    commit_id: Optional[str] = None
    created_at: Optional[datetime] = None
    diff_hunk: Optional[str] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    original_commit_id: Optional[str] = None
    original_position: Optional[int] = None
    path: Optional[str] = None
    position: Optional[int] = None
    pull_request_review_id: Optional[int] = None
    pull_request_url: Optional[str] = None
    resolver: Optional[User] = None
    updated_at: Optional[datetime] = None
    user: Optional[User] = None


class Reaction(BaseModel):
    content: Optional[str] = None
    created_at: Optional[datetime] = None
    user: Optional[User] = None


class Release(BaseModel):
    assets: Optional[List[Attachment]] = None
    author: Optional[User] = None
    body: Optional[str] = None
    created_at: Optional[datetime] = None
    draft: Optional[bool] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    name: Optional[str] = None
    prerelease: Optional[bool] = None
    published_at: Optional[datetime] = None
    tag_name: Optional[str] = None
    tarball_url: Optional[str] = None
    target_commitish: Optional[str] = None
    url: Optional[str] = None
    zipball_url: Optional[str] = None


class RepoCollaboratorPermission(BaseModel):
    permission: Optional[str] = None
    role_name: Optional[str] = None
    user: Optional[User] = None


class RepoCommit(BaseModel):
    author: Optional[CommitUser] = None
    committer: Optional[CommitUser] = None
    message: Optional[str] = None
    tree: Optional[CommitMeta] = None
    url: Optional[str] = None
    verification: Optional[PayloadCommitVerification] = None


class RepoTransfer(BaseModel):
    doer: Optional[User] = None
    recipient: Optional[User] = None
    teams: Optional[List[Team]] = None


class Repository(BaseModel):
    allow_merge_commits: Optional[bool] = None
    allow_rebase: Optional[bool] = None
    allow_rebase_explicit: Optional[bool] = None
    allow_rebase_update: Optional[bool] = None
    allow_squash_merge: Optional[bool] = None
    archived: Optional[bool] = None
    avatar_url: Optional[str] = None
    clone_url: Optional[str] = None
    created_at: Optional[datetime] = None
    default_allow_maintainer_edit: Optional[bool] = None
    default_branch: Optional[str] = None
    default_delete_branch_after_merge: Optional[bool] = None
    default_merge_style: Optional[str] = None
    description: Optional[str] = None
    empty: Optional[bool] = None
    external_tracker: Optional[ExternalTracker] = None
    external_wiki: Optional[ExternalWiki] = None
    fork: Optional[bool] = None
    forks_count: Optional[int] = None
    full_name: Optional[str] = None
    has_issues: Optional[bool] = None
    has_projects: Optional[bool] = None
    has_pull_requests: Optional[bool] = None
    has_wiki: Optional[bool] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    ignore_whitespace_conflicts: Optional[bool] = None
    internal: Optional[bool] = None
    internal_tracker: Optional[InternalTracker] = None
    language: Optional[str] = None
    languages_url: Optional[str] = None
    link: Optional[str] = None
    mirror: Optional[bool] = None
    mirror_interval: Optional[str] = None
    mirror_updated: Optional[datetime] = None
    name: Optional[str] = None
    open_issues_count: Optional[int] = None
    open_pr_counter: Optional[int] = None
    original_url: Optional[str] = None
    owner: Optional[User] = None
    parent: Optional[Repository] = None
    permissions: Optional[Permission2] = None
    private: Optional[bool] = None
    release_counter: Optional[int] = None
    repo_transfer: Optional[RepoTransfer] = None
    size: Optional[int] = None
    ssh_url: Optional[str] = None
    stars_count: Optional[int] = None
    template: Optional[bool] = None
    updated_at: Optional[datetime] = None
    watchers_count: Optional[int] = None
    website: Optional[str] = None


class SearchResults(BaseModel):
    data: Optional[List[Repository]] = None
    ok: Optional[bool] = None


class OrgsOrgReposGetResponse(RootModel[List[Repository]]):
    root: List[Repository]


class ReposOwnerRepoCommitsRefStatusesGetResponse(RootModel[List[CommitStatus]]):
    root: List[CommitStatus]


class ReposOwnerRepoContentsGetResponse(RootModel[List[ContentsResponse]]):
    root: List[ContentsResponse]


class ReposOwnerRepoForksGetResponse(RootModel[List[Repository]]):
    root: List[Repository]


class ReposOwnerRepoIssueTemplatesGetResponse(RootModel[List[IssueTemplate]]):
    root: List[IssueTemplate]


class ReposOwnerRepoIssuesCommentsGetResponse(RootModel[List[Comment]]):
    root: List[Comment]


class ReposOwnerRepoIssuesCommentsIdReactionsGetResponse(RootModel[List[Reaction]]):
    root: List[Reaction]


class ReposOwnerRepoIssuesIndexCommentsGetResponse(RootModel[List[Comment]]):
    root: List[Comment]


class ReposOwnerRepoIssuesIndexReactionsGetResponse(RootModel[List[Reaction]]):
    root: List[Reaction]


class ReposOwnerRepoMilestonesGetResponse(RootModel[List[Milestone]]):
    root: List[Milestone]


class ReposOwnerRepoPullsIndexRequestedReviewersPostResponse(
    RootModel[List[PullReview]]
):
    root: List[PullReview]


class ReposOwnerRepoPullsIndexReviewsGetResponse(RootModel[List[PullReview]]):
    root: List[PullReview]


class ReposOwnerRepoPullsIndexReviewsIdCommentsGetResponse(
    RootModel[List[PullReviewComment]]
):
    root: List[PullReviewComment]


class ReposOwnerRepoReleasesGetResponse(RootModel[List[Release]]):
    root: List[Release]


class ReposOwnerRepoStatusesShaGetResponse(RootModel[List[CommitStatus]]):
    root: List[CommitStatus]


class TeamsIdReposGetResponse(RootModel[List[Repository]]):
    root: List[Repository]


class UserGpgKeysGetResponse(RootModel[List[GPGKey]]):
    root: List[GPGKey]


class UserKeysGetResponse(RootModel[List[PublicKey]]):
    root: List[PublicKey]


class UserReposGetResponse(RootModel[List[Repository]]):
    root: List[Repository]


class UserStarredGetResponse(RootModel[List[Repository]]):
    root: List[Repository]


class UserSubscriptionsGetResponse(RootModel[List[Repository]]):
    root: List[Repository]


class UsersUsernameGpgKeysGetResponse(RootModel[List[GPGKey]]):
    root: List[GPGKey]


class UsersUsernameKeysGetResponse(RootModel[List[PublicKey]]):
    root: List[PublicKey]


class UsersUsernameReposGetResponse(RootModel[List[Repository]]):
    root: List[Repository]


class UsersUsernameStarredGetResponse(RootModel[List[Repository]]):
    root: List[Repository]


class UsersUsernameSubscriptionsGetResponse(RootModel[List[Repository]]):
    root: List[Repository]


class AnnotatedTag(BaseModel):
    message: Optional[str] = None
    object: Optional[AnnotatedTagObject] = None
    sha: Optional[str] = None
    tag: Optional[str] = None
    tagger: Optional[CommitUser] = None
    url: Optional[str] = None
    verification: Optional[PayloadCommitVerification] = None


class CombinedStatus(BaseModel):
    commit_url: Optional[str] = None
    repository: Optional[Repository] = None
    sha: Optional[str] = None
    state: Optional[CommitStatusState] = None
    statuses: Optional[List[CommitStatus]] = None
    total_count: Optional[int] = None
    url: Optional[str] = None


class Commit(BaseModel):
    author: Optional[User] = None
    commit: Optional[RepoCommit] = None
    committer: Optional[User] = None
    created: Optional[datetime] = None
    files: Optional[List[CommitAffectedFiles]] = None
    html_url: Optional[str] = None
    parents: Optional[List[CommitMeta]] = None
    sha: Optional[str] = None
    stats: Optional[CommitStats] = None
    url: Optional[str] = None


class DeployKey(BaseModel):
    created_at: Optional[datetime] = None
    fingerprint: Optional[str] = None
    id: Optional[int] = None
    key: Optional[str] = None
    key_id: Optional[int] = None
    read_only: Optional[bool] = None
    repository: Optional[Repository] = None
    title: Optional[str] = None
    url: Optional[str] = None


class FileDeleteResponse(BaseModel):
    commit: Optional[FileCommitResponse] = None
    content: Optional[Any] = None
    verification: Optional[PayloadCommitVerification] = None


class FileResponse(BaseModel):
    commit: Optional[FileCommitResponse] = None
    content: Optional[ContentsResponse] = None
    verification: Optional[PayloadCommitVerification] = None


class Issue(BaseModel):
    assets: Optional[List[Attachment]] = None
    assignee: Optional[User] = None
    assignees: Optional[List[User]] = None
    body: Optional[str] = None
    closed_at: Optional[datetime] = None
    comments: Optional[int] = None
    created_at: Optional[datetime] = None
    due_date: Optional[datetime] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    is_locked: Optional[bool] = None
    labels: Optional[List[Label]] = None
    milestone: Optional[Milestone] = None
    number: Optional[int] = None
    original_author: Optional[str] = None
    original_author_id: Optional[int] = None
    pull_request: Optional[PullRequestMeta] = None
    ref: Optional[str] = None
    repository: Optional[RepositoryMeta] = None
    state: Optional[StateType] = None
    title: Optional[str] = None
    updated_at: Optional[datetime] = None
    url: Optional[str] = None
    user: Optional[User] = None


class NodeInfo(BaseModel):
    metadata: Optional[Dict[str, Any]] = None
    openRegistrations: Optional[bool] = None
    protocols: Optional[List[str]] = None
    services: Optional[NodeInfoServices] = None
    software: Optional[NodeInfoSoftware] = None
    usage: Optional[NodeInfoUsage] = None
    version: Optional[str] = None


class Note(BaseModel):
    commit: Optional[Commit] = None
    message: Optional[str] = None


class NotificationThread(BaseModel):
    id: Optional[int] = None
    pinned: Optional[bool] = None
    repository: Optional[Repository] = None
    subject: Optional[NotificationSubject] = None
    unread: Optional[bool] = None
    updated_at: Optional[datetime] = None
    url: Optional[str] = None


class PRBranchInfo(BaseModel):
    label: Optional[str] = None
    ref: Optional[str] = None
    repo: Optional[Repository] = None
    repo_id: Optional[int] = None
    sha: Optional[str] = None


class Package(BaseModel):
    created_at: Optional[datetime] = None
    creator: Optional[User] = None
    id: Optional[int] = None
    name: Optional[str] = None
    owner: Optional[User] = None
    repository: Optional[Repository] = None
    type: Optional[str] = None
    version: Optional[str] = None


class PayloadCommit(BaseModel):
    added: Optional[List[str]] = None
    author: Optional[PayloadUser] = None
    committer: Optional[PayloadUser] = None
    id: Optional[str] = Field(None, description='sha1 hash of the commit')
    message: Optional[str] = None
    modified: Optional[List[str]] = None
    removed: Optional[List[str]] = None
    timestamp: Optional[datetime] = None
    url: Optional[str] = None
    verification: Optional[PayloadCommitVerification] = None


class PullRequest(BaseModel):
    allow_maintainer_edit: Optional[bool] = None
    assignee: Optional[User] = None
    assignees: Optional[List[User]] = None
    base: Optional[PRBranchInfo] = None
    body: Optional[str] = None
    closed_at: Optional[datetime] = None
    comments: Optional[int] = None
    created_at: Optional[datetime] = None
    diff_url: Optional[str] = None
    due_date: Optional[datetime] = None
    head: Optional[PRBranchInfo] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    is_locked: Optional[bool] = None
    labels: Optional[List[Label]] = None
    merge_base: Optional[str] = None
    merge_commit_sha: Optional[str] = None
    mergeable: Optional[bool] = None
    merged: Optional[bool] = None
    merged_at: Optional[datetime] = None
    merged_by: Optional[User] = None
    milestone: Optional[Milestone] = None
    number: Optional[int] = None
    patch_url: Optional[str] = None
    state: Optional[StateType] = None
    title: Optional[str] = None
    updated_at: Optional[datetime] = None
    url: Optional[str] = None
    user: Optional[User] = None


class TrackedTime(BaseModel):
    created: Optional[datetime] = None
    id: Optional[int] = None
    issue: Optional[Issue] = None
    issue_id: Optional[int] = Field(
        None, description='deprecated (only for backwards compatibility)'
    )
    time: Optional[int] = Field(None, description='Time in seconds')
    user_id: Optional[int] = Field(
        None, description='deprecated (only for backwards compatibility)'
    )
    user_name: Optional[str] = None


class NotificationsGetResponse(RootModel[List[NotificationThread]]):
    root: List[NotificationThread]


class NotificationsPutResponse(RootModel[List[NotificationThread]]):
    root: List[NotificationThread]


class PackagesOwnerGetResponse(RootModel[List[Package]]):
    root: List[Package]


class ReposIssuesSearchGetResponse(RootModel[List[Issue]]):
    root: List[Issue]


class ReposOwnerRepoCommitsGetResponse(RootModel[List[Commit]]):
    root: List[Commit]


class ReposOwnerRepoIssuesGetResponse(RootModel[List[Issue]]):
    root: List[Issue]


class ReposOwnerRepoIssuesIndexTimesGetResponse(RootModel[List[TrackedTime]]):
    root: List[TrackedTime]


class ReposOwnerRepoKeysGetResponse(RootModel[List[DeployKey]]):
    root: List[DeployKey]


class ReposOwnerRepoNotificationsGetResponse(RootModel[List[NotificationThread]]):
    root: List[NotificationThread]


class ReposOwnerRepoNotificationsPutResponse(RootModel[List[NotificationThread]]):
    root: List[NotificationThread]


class ReposOwnerRepoPullsGetResponse(RootModel[List[PullRequest]]):
    root: List[PullRequest]


class ReposOwnerRepoPullsIndexCommitsGetResponse(RootModel[List[Commit]]):
    root: List[Commit]


class ReposOwnerRepoTimesGetResponse(RootModel[List[TrackedTime]]):
    root: List[TrackedTime]


class ReposOwnerRepoTimesUserGetResponse(RootModel[List[TrackedTime]]):
    root: List[TrackedTime]


class UserTimesGetResponse(RootModel[List[TrackedTime]]):
    root: List[TrackedTime]


class Branch(BaseModel):
    commit: Optional[PayloadCommit] = None
    effective_branch_protection_name: Optional[str] = None
    enable_status_check: Optional[bool] = None
    name: Optional[str] = None
    protected: Optional[bool] = None
    required_approvals: Optional[int] = None
    status_check_contexts: Optional[List[str]] = None
    user_can_merge: Optional[bool] = None
    user_can_push: Optional[bool] = None


class TimelineComment(BaseModel):
    assignee: Optional[User] = None
    assignee_team: Optional[Team] = None
    body: Optional[str] = None
    created_at: Optional[datetime] = None
    dependent_issue: Optional[Issue] = None
    html_url: Optional[str] = None
    id: Optional[int] = None
    issue_url: Optional[str] = None
    label: Optional[Label] = None
    milestone: Optional[Milestone] = None
    new_ref: Optional[str] = None
    new_title: Optional[str] = None
    old_milestone: Optional[Milestone] = None
    old_project_id: Optional[int] = None
    old_ref: Optional[str] = None
    old_title: Optional[str] = None
    project_id: Optional[int] = None
    pull_request_url: Optional[str] = None
    ref_action: Optional[str] = None
    ref_comment: Optional[Comment] = None
    ref_commit_sha: Optional[str] = Field(
        None, description='commit SHA where issue/PR was referenced'
    )
    ref_issue: Optional[Issue] = None
    removed_assignee: Optional[bool] = Field(
        None, description='whether the assignees were removed or added'
    )
    resolve_doer: Optional[User] = None
    review_id: Optional[int] = None
    tracked_time: Optional[TrackedTime] = None
    type: Optional[str] = None
    updated_at: Optional[datetime] = None
    user: Optional[User] = None


class ReposOwnerRepoBranchesGetResponse(RootModel[List[Branch]]):
    root: List[Branch]


class ReposOwnerRepoIssuesIndexTimelineGetResponse(RootModel[List[TimelineComment]]):
    root: List[TimelineComment]


GPGKey.model_rebuild()
Repository.model_rebuild()
