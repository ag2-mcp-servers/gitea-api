# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:44:58+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import (
    APIKeyHeader,
    APIKeyQuery,
    BaseSecurity,
    HTTPBasic,
)
from fastapi import Path, Query, UploadFile

from models import (
    AccessToken,
    ActivityPub,
    AddCollaboratorOption,
    AddTimeOption,
    AdminCronGetResponse,
    AdminHooksGetResponse,
    AdminOrgsGetResponse,
    AdminUnadoptedGetResponse,
    AdminUsersGetResponse,
    AnnotatedTag,
    APIError,
    Attachment,
    Branch,
    BranchProtection,
    CombinedStatus,
    Comment,
    Commit,
    CommitStatus,
    ContentsResponse,
    CreateAccessTokenOption,
    CreateBranchProtectionOption,
    CreateBranchRepoOption,
    CreateEmailOption,
    CreateFileOptions,
    CreateForkOption,
    CreateGPGKeyOption,
    CreateHookOption,
    CreateIssueCommentOption,
    CreateIssueOption,
    CreateKeyOption,
    CreateLabelOption,
    CreateMilestoneOption,
    CreateOAuth2ApplicationOptions,
    CreateOrgOption,
    CreatePullRequestOption,
    CreatePullReviewOptions,
    CreatePushMirrorOption,
    CreateReleaseOption,
    CreateRepoOption,
    CreateStatusOption,
    CreateTagOption,
    CreateTeamOption,
    CreateUserOption,
    CreateWikiPageOptions,
    DeleteEmailOption,
    DeleteFileOptions,
    DeployKey,
    DiffType,
    DismissPullReviewOptions,
    EditAttachmentOptions,
    EditBranchProtectionOption,
    EditDeadlineOption,
    EditGitHookOption,
    EditHookOption,
    EditIssueCommentOption,
    EditIssueOption,
    EditLabelOption,
    EditMilestoneOption,
    EditOrgOption,
    EditPullRequestOption,
    EditReactionOption,
    EditReleaseOption,
    EditRepoOption,
    EditTeamOption,
    EditUserOption,
    FileDeleteResponse,
    FileResponse,
    GeneralAPISettings,
    GeneralAttachmentSettings,
    GeneralRepoSettings,
    GeneralUISettings,
    GenerateRepoOption,
    GitBlobResponse,
    GitHook,
    GitTreeResponse,
    GPGKey,
    Hook,
    Issue,
    IssueDeadline,
    IssueLabelsOption,
    Label,
    Labels,
    MarkdownOption,
    MergePullRequestOption,
    MigrateRepoOptions,
    Milestone,
    NodeInfo,
    Note,
    NotificationCount,
    NotificationsGetResponse,
    NotificationsPutResponse,
    NotificationThread,
    OAuth2Application,
    Organization,
    OrganizationPermissions,
    OrgsGetResponse,
    OrgsOrgHooksGetResponse,
    OrgsOrgLabelsGetResponse,
    OrgsOrgMembersGetResponse,
    OrgsOrgPublicMembersGetResponse,
    OrgsOrgReposGetResponse,
    OrgsOrgTeamsGetResponse,
    OrgsOrgTeamsSearchGetResponse,
    Package,
    PackagesOwnerGetResponse,
    PackagesOwnerTypeNameVersionFilesGetResponse,
    PublicKey,
    PullRequest,
    PullReview,
    PullReviewRequestOptions,
    PushMirror,
    Reaction,
    Release,
    RepoCollaboratorPermission,
    ReposIssuesSearchGetResponse,
    Repository,
    ReposOwnerRepoAssigneesGetResponse,
    ReposOwnerRepoBranchesGetResponse,
    ReposOwnerRepoBranchProtectionsGetResponse,
    ReposOwnerRepoCollaboratorsGetResponse,
    ReposOwnerRepoCommitsGetResponse,
    ReposOwnerRepoCommitsRefStatusesGetResponse,
    ReposOwnerRepoContentsGetResponse,
    ReposOwnerRepoForksGetResponse,
    ReposOwnerRepoGitRefsGetResponse,
    ReposOwnerRepoGitRefsRefGetResponse,
    ReposOwnerRepoHooksGetResponse,
    ReposOwnerRepoHooksGitGetResponse,
    ReposOwnerRepoIssuesCommentsGetResponse,
    ReposOwnerRepoIssuesCommentsIdAssetsGetResponse,
    ReposOwnerRepoIssuesCommentsIdReactionsGetResponse,
    ReposOwnerRepoIssuesGetResponse,
    ReposOwnerRepoIssuesIndexAssetsGetResponse,
    ReposOwnerRepoIssuesIndexCommentsGetResponse,
    ReposOwnerRepoIssuesIndexLabelsGetResponse,
    ReposOwnerRepoIssuesIndexLabelsPostResponse,
    ReposOwnerRepoIssuesIndexLabelsPutResponse,
    ReposOwnerRepoIssuesIndexReactionsGetResponse,
    ReposOwnerRepoIssuesIndexSubscriptionsGetResponse,
    ReposOwnerRepoIssuesIndexTimelineGetResponse,
    ReposOwnerRepoIssuesIndexTimesGetResponse,
    ReposOwnerRepoIssueTemplatesGetResponse,
    ReposOwnerRepoKeysGetResponse,
    ReposOwnerRepoLabelsGetResponse,
    ReposOwnerRepoLanguagesGetResponse,
    ReposOwnerRepoMilestonesGetResponse,
    ReposOwnerRepoNotificationsGetResponse,
    ReposOwnerRepoNotificationsPutResponse,
    ReposOwnerRepoPullsGetResponse,
    ReposOwnerRepoPullsIndexCommitsGetResponse,
    ReposOwnerRepoPullsIndexFilesGetResponse,
    ReposOwnerRepoPullsIndexRequestedReviewersPostResponse,
    ReposOwnerRepoPullsIndexReviewsGetResponse,
    ReposOwnerRepoPullsIndexReviewsIdCommentsGetResponse,
    ReposOwnerRepoPushMirrorsGetResponse,
    ReposOwnerRepoReleasesGetResponse,
    ReposOwnerRepoReleasesIdAssetsGetResponse,
    ReposOwnerRepoReviewersGetResponse,
    ReposOwnerRepoStargazersGetResponse,
    ReposOwnerRepoStatusesShaGetResponse,
    ReposOwnerRepoSubscribersGetResponse,
    ReposOwnerRepoTagsGetResponse,
    ReposOwnerRepoTeamsGetResponse,
    ReposOwnerRepoTimesGetResponse,
    ReposOwnerRepoTimesUserGetResponse,
    ReposOwnerRepoWikiPagesGetResponse,
    RepoTopicOptions,
    SearchResults,
    ServerVersion,
    Sort,
    Sort2,
    Sort4,
    State1,
    State3,
    State7,
    StatusTypes,
    Style,
    SubjectType,
    SubjectType1,
    SubmitPullReviewOptions,
    Tag,
    Team,
    TeamsIdMembersGetResponse,
    TeamsIdReposGetResponse,
    TopicName,
    TopicsSearchGetResponse,
    TrackedTime,
    TransferRepoOption,
    Type1,
    Type3,
    UpdateFileOptions,
    User,
    UserApplicationsOauth2GetResponse,
    UserEmailsGetResponse,
    UserEmailsPostResponse,
    UserFollowersGetResponse,
    UserFollowingGetResponse,
    UserGpgKeysGetResponse,
    UserKeysGetResponse,
    UserOrgsGetResponse,
    UserReposGetResponse,
    UserSettingsGetResponse,
    UserSettingsOptions,
    UserSettingsPatchResponse,
    UsersSearchGetResponse,
    UserStarredGetResponse,
    UserStopwatchesGetResponse,
    UserSubscriptionsGetResponse,
    UsersUsernameFollowersGetResponse,
    UsersUsernameFollowingGetResponse,
    UsersUsernameGpgKeysGetResponse,
    UsersUsernameHeatmapGetResponse,
    UsersUsernameKeysGetResponse,
    UsersUsernameOrgsGetResponse,
    UsersUsernameReposGetResponse,
    UsersUsernameStarredGetResponse,
    UsersUsernameSubscriptionsGetResponse,
    UsersUsernameTokensGetResponse,
    UserTeamsGetResponse,
    UserTimesGetResponse,
    WatchInfo,
    Whitespace,
    WikiCommitList,
    WikiPage,
)

app = MCPProxy(
    contact={'x-twitter': 'giteaio'},
    description='This documentation describes the Gitea API.',
    license={'name': 'MIT', 'url': 'http://opensource.org/licenses/MIT'},
    title='Gitea API.',
    version='1.20.0+dev-93-g6886706f5',
    servers=[{'url': '/api/v1'}],
)


@app.get(
    '/activitypub/user/{username}',
    tags=['user_management', 'activitypub_integration'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def activitypub_person(username: str):
    """
    Returns the Person actor for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/activitypub/user/{username}/inbox',
    tags=['notification_management', 'user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def activitypub_person_inbox(username: str):
    """
    Send to the inbox
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin/cron',
    tags=['organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def admin_cron_list(page: Optional[int] = None, limit: Optional[int] = None):
    """
    List cron tasks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin/cron/{task}',
    tags=[
        'user_management',
        'organization_management',
        'repository_management',
        'notification_management',
        'file_operations',
        'issue_management',
        'commit_management',
        'time_tracking',
        'webhook_management',
        'repository_settings',
        'topic_management',
        'user_authentication',
        'activitypub_integration',
        'search_operations',
    ],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def admin_cron_run(task: str):
    """
    Run cron task
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin/hooks',
    tags=['webhook_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def admin_list_hooks(page: Optional[int] = None, limit: Optional[int] = None):
    """
    List system's webhooks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin/hooks',
    tags=['webhook_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def admin_create_hook(body: CreateHookOption):
    """
    Create a hook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin/hooks/{id}',
    tags=['webhook_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def admin_get_hook(id: int):
    """
    Get a hook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/admin/hooks/{id}',
    tags=['webhook_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def admin_edit_hook(id: int, body: EditHookOption = None):
    """
    Update a hook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin/orgs',
    tags=['organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def admin_get_all_orgs(page: Optional[int] = None, limit: Optional[int] = None):
    """
    List all organizations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin/unadopted',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def admin_unadopted_list(
    page: Optional[int] = None,
    limit: Optional[int] = None,
    pattern: Optional[str] = None,
):
    """
    List unadopted repositories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/admin/unadopted/{owner}/{repo}',
    tags=['repository_management', 'file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def admin_delete_unadopted_repository(owner: str, repo: str = ...):
    """
    Delete unadopted files
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin/unadopted/{owner}/{repo}',
    tags=['repository_management', 'file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def admin_adopt_repository(owner: str, repo: str = ...):
    """
    Adopt unadopted files as a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/admin/users',
    tags=['user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def admin_get_all_users(page: Optional[int] = None, limit: Optional[int] = None):
    """
    List all users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin/users',
    tags=['user_management', 'user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def admin_create_user(body: CreateUserOption = None):
    """
    Create a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/admin/users/{username}',
    tags=['user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def admin_delete_user(username: str):
    """
    Delete a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/admin/users/{username}',
    tags=['user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def admin_edit_user(username: str, body: EditUserOption = None):
    """
    Edit an existing user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin/users/{username}/keys',
    tags=['user_management', 'user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def admin_create_public_key(username: str, body: CreateKeyOption = None):
    """
    Add a public key on behalf of a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/admin/users/{username}/keys/{id}',
    tags=['user_management', 'user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def admin_delete_user_public_key(username: str, id: int = ...):
    """
    Delete a user's public key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin/users/{username}/orgs',
    tags=['organization_management', 'user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def admin_create_org(username: str, body: CreateOrgOption = ...):
    """
    Create an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/admin/users/{username}/repos',
    tags=['repository_management', 'user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def admin_create_repo(username: str, body: CreateRepoOption = ...):
    """
    Create a repository on behalf of a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/amdin/hooks/{id}',
    tags=['webhook_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def admin_delete_hook(id: int):
    """
    Delete a hook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/markdown',
    tags=['file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def render_markdown(body: MarkdownOption = None):
    """
    Render a markdown document as HTML
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/markdown/raw',
    tags=['file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def render_markdown_raw():
    """
    Render raw markdown as HTML
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nodeinfo',
    tags=['user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def get_node_info():
    """
    Returns the nodeinfo of the Gitea application
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/notifications',
    tags=['notification_management', 'user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def notify_get_list(
    all: Optional[bool] = None,
    status_types: Optional[StatusTypes] = Query(None, alias='status-types'),
    subject_type: Optional[SubjectType] = Query(None, alias='subject-type'),
    since: Optional[datetime] = None,
    before: Optional[datetime] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List users's notification threads
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/notifications',
    tags=['notification_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def notify_read_list(
    last_read_at: Optional[datetime] = None,
    all: Optional[str] = None,
    status_types: Optional[StatusTypes] = Query(None, alias='status-types'),
    to_status: Optional[str] = Query(None, alias='to-status'),
):
    """
    Mark notification threads as read, pinned or unread
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/notifications/new',
    tags=['notification_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def notify_new_available():
    """
    Check if unread notifications exist
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/notifications/threads/{id}',
    tags=['notification_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def notify_get_thread(id: str):
    """
    Get notification thread by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/notifications/threads/{id}',
    tags=['notification_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def notify_read_thread(
    id: str, to_status: Optional[str] = Query('read', alias='to-status')
):
    """
    Mark notification thread as read by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/org/{org}/repos',
    tags=['organization_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def create_org_repo_deprecated(org: str, body: CreateRepoOption = None):
    """
    Create a repository in an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs',
    tags=['organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_get_all(page: Optional[int] = None, limit: Optional[int] = None):
    """
    Get list of organizations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/orgs',
    tags=['organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_create(body: CreateOrgOption):
    """
    Create an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/orgs/{org}',
    tags=['organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_delete(org: str):
    """
    Delete an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}',
    tags=['organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_get(org: str):
    """
    Get an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/orgs/{org}',
    tags=['organization_management', 'user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_edit(org: str, body: EditOrgOption = ...):
    """
    Edit an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/hooks',
    tags=['organization_management', 'webhook_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_list_hooks(org: str, page: Optional[int] = None, limit: Optional[int] = None):
    """
    List an organization's webhooks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/orgs/{org}/hooks',
    tags=['organization_management', 'webhook_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_create_hook(org: str, body: CreateHookOption = ...):
    """
    Create a hook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/orgs/{org}/hooks/{id}',
    tags=['organization_management', 'webhook_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_delete_hook(org: str, id: int = ...):
    """
    Delete a hook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/hooks/{id}',
    tags=['organization_management', 'webhook_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_get_hook(org: str, id: int = ...):
    """
    Get a hook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/orgs/{org}/hooks/{id}',
    tags=['organization_management', 'webhook_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_edit_hook(org: str, id: int = ..., body: EditHookOption = None):
    """
    Update a hook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/labels',
    tags=['organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_list_labels(org: str, page: Optional[int] = None, limit: Optional[int] = None):
    """
    List an organization's labels
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/orgs/{org}/labels',
    tags=['organization_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_create_label(org: str, body: CreateLabelOption = None):
    """
    Create a label for an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/orgs/{org}/labels/{id}',
    tags=['issue_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_delete_label(org: str, id: int = ...):
    """
    Delete a label
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/labels/{id}',
    tags=['organization_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_get_label(org: str, id: int = ...):
    """
    Get a single label
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/orgs/{org}/labels/{id}',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_edit_label(org: str, id: int = ..., body: EditLabelOption = None):
    """
    Update a label
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/members',
    tags=['user_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_list_members(org: str, page: Optional[int] = None, limit: Optional[int] = None):
    """
    List an organization's members
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/orgs/{org}/members/{username}',
    tags=['user_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_delete_member(org: str, username: str = ...):
    """
    Remove a member from an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/members/{username}',
    tags=['user_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_is_member(org: str, username: str = ...):
    """
    Check if a user is a member of an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/public_members',
    tags=['organization_management', 'user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_list_public_members(
    org: str, page: Optional[int] = None, limit: Optional[int] = None
):
    """
    List an organization's public members
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/orgs/{org}/public_members/{username}',
    tags=['user_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_conceal_member(org: str, username: str = ...):
    """
    Conceal a user's membership
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/public_members/{username}',
    tags=['user_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_is_public_member(org: str, username: str = ...):
    """
    Check if a user is a public member of an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/orgs/{org}/public_members/{username}',
    tags=['user_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_publicize_member(org: str, username: str = ...):
    """
    Publicize a user's membership
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/repos',
    tags=['organization_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_list_repos(org: str, page: Optional[int] = None, limit: Optional[int] = None):
    """
    List an organization's repos
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/orgs/{org}/repos',
    tags=['organization_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def create_org_repo(org: str, body: CreateRepoOption = None):
    """
    Create a repository in an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/teams',
    tags=['organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_list_teams(org: str, page: Optional[int] = None, limit: Optional[int] = None):
    """
    List an organization's teams
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/orgs/{org}/teams',
    tags=['organization_management', 'user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_create_team(org: str, body: CreateTeamOption = None):
    """
    Create a team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orgs/{org}/teams/search',
    tags=['organization_management', 'search_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def team_search(
    org: str,
    q: Optional[str] = None,
    include_desc: Optional[bool] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    Search for teams within an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/packages/{owner}',
    tags=['repository_management', 'search_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def list_packages(
    owner: str,
    page: Optional[int] = None,
    limit: Optional[int] = None,
    type: Optional[Type1] = None,
    q: Optional[str] = None,
):
    """
    Gets all packages of an owner
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/packages/{owner}/{type}/{name}/{version}',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def delete_package(owner: str, type: str = ..., name: str = ..., version: str = ...):
    """
    Delete a package
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/packages/{owner}/{type}/{name}/{version}',
    tags=['repository_management', 'file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def get_package(owner: str, type: str = ..., name: str = ..., version: str = ...):
    """
    Gets a package
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/packages/{owner}/{type}/{name}/{version}/files',
    tags=['file_operations', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def list_package_files(
    owner: str, type: str = ..., name: str = ..., version: str = ...
):
    """
    Gets all files of a package
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/issues/search',
    tags=['issue_management', 'search_operations', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_search_issues(
    state: Optional[str] = None,
    labels: Optional[str] = None,
    milestones: Optional[str] = None,
    q: Optional[str] = None,
    priority_repo_id: Optional[int] = None,
    type: Optional[str] = None,
    since: Optional[datetime] = None,
    before: Optional[datetime] = None,
    assigned: Optional[bool] = None,
    created: Optional[bool] = None,
    mentioned: Optional[bool] = None,
    review_requested: Optional[bool] = None,
    reviewed: Optional[bool] = None,
    owner: Optional[str] = None,
    team: Optional[str] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    Search for issues across the repositories that the user has access to
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/migrate',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_migrate(body: MigrateRepoOptions = None):
    """
    Migrate a remote git repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/search',
    tags=['repository_management', 'topic_management', 'search_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_search(
    q: Optional[str] = None,
    topic: Optional[bool] = None,
    include_desc: Optional[bool] = Query(None, alias='includeDesc'),
    uid: Optional[int] = None,
    priority_owner_id: Optional[int] = None,
    team_id: Optional[int] = None,
    starred_by: Optional[int] = Query(None, alias='starredBy'),
    private: Optional[bool] = None,
    is_private: Optional[bool] = None,
    template: Optional[bool] = None,
    archived: Optional[bool] = None,
    mode: Optional[str] = None,
    exclusive: Optional[bool] = None,
    sort: Optional[str] = None,
    order: Optional[str] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    Search for repositories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_delete(owner: str, repo: str = ...):
    """
    Delete a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get(owner: str, repo: str = ...):
    """
    Get a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_edit(owner: str, repo: str = ..., body: EditRepoOption = None):
    """
    Edit a repository's properties. Only fields that are set will be changed.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/archive/{archive}',
    tags=['repository_management', 'file_operations', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_archive(owner: str, repo: str = ..., archive: str = ...):
    """
    Get an archive of a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/assignees',
    tags=['user_management', 'issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_assignees(owner: str, repo: str = ...):
    """
    Return all users that have write access and can be assigned to issues
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/branch_protections',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_list_branch_protection(owner: str, repo: str = ...):
    """
    List branch protections for a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/branch_protections',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_create_branch_protection(
    owner: str, repo: str = ..., body: CreateBranchProtectionOption = None
):
    """
    Create a branch protections for a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/branch_protections/{name}',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_delete_branch_protection(owner: str, repo: str = ..., name: str = ...):
    """
    Delete a specific branch protection for the repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/branch_protections/{name}',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_branch_protection(owner: str, repo: str = ..., name: str = ...):
    """
    Get a specific branch protection for the repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/branch_protections/{name}',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_edit_branch_protection(
    owner: str,
    repo: str = ...,
    name: str = ...,
    body: EditBranchProtectionOption = None,
):
    """
    Edit a branch protections for a repository. Only fields that are set will be changed
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/branches',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_list_branches(
    owner: str, repo: str = ..., page: Optional[int] = None, limit: Optional[int] = None
):
    """
    List a repository's branches
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/branches',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_create_branch(
    owner: str, repo: str = ..., body: CreateBranchRepoOption = None
):
    """
    Create a branch
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/branches/{branch}',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_delete_branch(owner: str, repo: str = ..., branch: str = ...):
    """
    Delete a specific branch from a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/branches/{branch}',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_branch(owner: str, repo: str = ..., branch: str = ...):
    """
    Retrieve a specific branch from a repository, including its effective branch protection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/collaborators',
    tags=['user_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_list_collaborators(
    owner: str, repo: str = ..., page: Optional[int] = None, limit: Optional[int] = None
):
    """
    List a repository's collaborators
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/collaborators/{collaborator}',
    tags=['user_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_delete_collaborator(owner: str, repo: str = ..., collaborator: str = ...):
    """
    Delete a collaborator from a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/collaborators/{collaborator}',
    tags=['user_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_check_collaborator(owner: str, repo: str = ..., collaborator: str = ...):
    """
    Check if a user is a collaborator of a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/collaborators/{collaborator}',
    tags=['user_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_add_collaborator(
    owner: str,
    repo: str = ...,
    collaborator: str = ...,
    body: AddCollaboratorOption = None,
):
    """
    Add a collaborator to a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/collaborators/{collaborator}/permission',
    tags=['user_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_repo_permissions(owner: str, repo: str = ..., collaborator: str = ...):
    """
    Get repository permissions for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/commits',
    tags=['repository_management', 'commit_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_all_commits(
    owner: str,
    repo: str = ...,
    sha: Optional[str] = None,
    path: Optional[str] = None,
    stat: Optional[bool] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    Get a list of all commits from a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/commits/{ref}/status',
    tags=['commit_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_combined_status_by_ref(
    owner: str,
    repo: str = ...,
    ref: str = ...,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    Get a commit's combined status, by branch/tag/commit reference
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/commits/{ref}/statuses',
    tags=['commit_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_list_statuses_by_ref(
    owner: str,
    repo: str = ...,
    ref: str = ...,
    sort: Optional[Sort] = None,
    state: Optional[State1] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    Get a commit's statuses, by branch/tag/commit reference
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/contents',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_contents_list(owner: str, repo: str = ..., ref: Optional[str] = None):
    """
    Gets the metadata of all the entries of the root dir
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/contents/{filepath}',
    tags=['repository_management', 'file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_delete_file(
    owner: str, repo: str = ..., filepath: str = ..., body: DeleteFileOptions = ...
):
    """
    Delete a file in a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/contents/{filepath}',
    tags=['repository_management', 'file_operations', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_contents(
    owner: str, repo: str = ..., filepath: str = ..., ref: Optional[str] = None
):
    """
    Gets the metadata and contents (if a file) of an entry in a repository, or a list of entries if a dir
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/contents/{filepath}',
    tags=['repository_management', 'file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_create_file(
    owner: str, repo: str = ..., filepath: str = ..., body: CreateFileOptions = ...
):
    """
    Create a file in a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/contents/{filepath}',
    tags=['repository_management', 'file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_update_file(
    owner: str, repo: str = ..., filepath: str = ..., body: UpdateFileOptions = ...
):
    """
    Update a file in a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/diffpatch',
    tags=['repository_management', 'file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_apply_diff_patch(owner: str, repo: str = ..., body: UpdateFileOptions = ...):
    """
    Apply diff patch to repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/editorconfig/{filepath}',
    tags=['repository_management', 'file_operations', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_editor_config(
    owner: str, repo: str = ..., filepath: str = ..., ref: Optional[str] = None
):
    """
    Get the EditorConfig definitions of a file in a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/forks',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def list_forks(
    owner: str, repo: str = ..., page: Optional[int] = None, limit: Optional[int] = None
):
    """
    List a repository's forks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/forks',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def create_fork(owner: str, repo: str = ..., body: CreateForkOption = None):
    """
    Fork a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/git/blobs/{sha}',
    tags=['repository_management', 'file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def get_blob(owner: str, repo: str = ..., sha: str = ...):
    """
    Gets the blob of a repository.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/git/commits/{sha}',
    tags=['repository_management', 'commit_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_single_commit(owner: str, repo: str = ..., sha: str = ...):
    """
    Get a single commit from a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/git/commits/{sha}.{diffType}',
    tags=['repository_management', 'commit_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_download_commit_diff_or_patch(
    owner: str,
    repo: str = ...,
    sha: str = ...,
    diff_type: DiffType = Path(..., alias='diffType'),
):
    """
    Get a commit's diff or patch
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/git/notes/{sha}',
    tags=['repository_management', 'commit_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_note(owner: str, repo: str = ..., sha: str = ...):
    """
    Get a note corresponding to a single commit from a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/git/refs',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_list_all_git_refs(owner: str, repo: str = ...):
    """
    Get specified ref or filtered repository's refs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/git/refs/{ref}',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_list_git_refs(owner: str, repo: str = ..., ref: str = ...):
    """
    Get specified ref or filtered repository's refs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/git/tags/{sha}',
    tags=['repository_management', 'commit_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def get_annotated_tag(owner: str, repo: str = ..., sha: str = ...):
    """
    Gets the tag object of an annotated tag (not lightweight tags)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/git/trees/{sha}',
    tags=['repository_management', 'file_operations', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def get_tree(
    owner: str,
    repo: str = ...,
    sha: str = ...,
    recursive: Optional[bool] = None,
    page: Optional[int] = None,
    per_page: Optional[int] = None,
):
    """
    Gets the tree of a repository.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/hooks',
    tags=['repository_management', 'webhook_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_list_hooks(
    owner: str, repo: str = ..., page: Optional[int] = None, limit: Optional[int] = None
):
    """
    List the hooks in a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/hooks',
    tags=['repository_management', 'webhook_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_create_hook(owner: str, repo: str = ..., body: CreateHookOption = None):
    """
    Create a hook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/hooks/git',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_list_git_hooks(owner: str, repo: str = ...):
    """
    List the Git hooks in a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/hooks/git/{id}',
    tags=['repository_management', 'webhook_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_delete_git_hook(owner: str, repo: str = ..., id: str = ...):
    """
    Delete a Git hook in a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/hooks/git/{id}',
    tags=['repository_management', 'webhook_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_git_hook(owner: str, repo: str = ..., id: str = ...):
    """
    Get a Git hook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/hooks/git/{id}',
    tags=['repository_management', 'file_operations', 'webhook_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_edit_git_hook(
    owner: str, repo: str = ..., id: str = ..., body: EditGitHookOption = None
):
    """
    Edit a Git hook in a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/hooks/{id}',
    tags=['repository_management', 'webhook_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_delete_hook(owner: str, repo: str = ..., id: int = ...):
    """
    Delete a hook in a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/hooks/{id}',
    tags=['webhook_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_hook(owner: str, repo: str = ..., id: int = ...):
    """
    Get a hook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/hooks/{id}',
    tags=['repository_management', 'webhook_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_edit_hook(
    owner: str, repo: str = ..., id: int = ..., body: EditHookOption = None
):
    """
    Edit a hook in a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/hooks/{id}/tests',
    tags=['repository_management', 'webhook_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_test_hook(
    owner: str, repo: str = ..., id: int = ..., ref: Optional[str] = None
):
    """
    Test a push webhook
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issue_templates',
    tags=['repository_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_issue_templates(owner: str, repo: str = ...):
    """
    Get available issue templates for a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues',
    tags=['repository_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_list_issues(
    owner: str,
    repo: str = ...,
    state: Optional[State3] = None,
    labels: Optional[str] = None,
    q: Optional[str] = None,
    type: Optional[Type3] = None,
    milestones: Optional[str] = None,
    since: Optional[datetime] = None,
    before: Optional[datetime] = None,
    created_by: Optional[str] = None,
    assigned_by: Optional[str] = None,
    mentioned_by: Optional[str] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List a repository's issues
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/issues',
    tags=['repository_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_create_issue(owner: str, repo: str = ..., body: CreateIssueOption = None):
    """
    Create an issue. If using deadline only the date will be taken into account, and time of day ignored.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/comments',
    tags=['repository_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_get_repo_comments(
    owner: str,
    repo: str = ...,
    since: Optional[datetime] = None,
    before: Optional[datetime] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List all comments in a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/issues/comments/{id}',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_delete_comment(owner: str, repo: str = ..., id: int = ...):
    """
    Delete a comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/comments/{id}',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_get_comment(owner: str, repo: str = ..., id: int = ...):
    """
    Get a comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/issues/comments/{id}',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_edit_comment(
    owner: str, repo: str = ..., id: int = ..., body: EditIssueCommentOption = None
):
    """
    Edit a comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/comments/{id}/assets',
    tags=['issue_management', 'file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_list_issue_comment_attachments(owner: str, repo: str = ..., id: int = ...):
    """
    List comment's attachments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/issues/comments/{id}/assets',
    tags=['issue_management', 'file_operations', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_create_issue_comment_attachment(
    owner: str,
    repo: str = ...,
    id: int = ...,
    name: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Create a comment attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}',
    tags=['issue_management', 'file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_delete_issue_comment_attachment(
    owner: str, repo: str = ..., id: int = ..., attachment_id: int = ...
):
    """
    Delete a comment attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}',
    tags=['repository_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_get_issue_comment_attachment(
    owner: str, repo: str = ..., id: int = ..., attachment_id: int = ...
):
    """
    Get a comment attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}',
    tags=['issue_management', 'file_operations', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_edit_issue_comment_attachment(
    owner: str,
    repo: str = ...,
    id: int = ...,
    attachment_id: int = ...,
    body: EditAttachmentOptions = None,
):
    """
    Edit a comment attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/issues/comments/{id}/reactions',
    tags=['issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_delete_comment_reaction(
    owner: str, repo: str = ..., id: int = ..., body: EditReactionOption = None
):
    """
    Remove a reaction from a comment of an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/comments/{id}/reactions',
    tags=['issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_get_comment_reactions(owner: str, repo: str = ..., id: int = ...):
    """
    Get a list of reactions from a comment of an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/issues/comments/{id}/reactions',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_post_comment_reaction(
    owner: str, repo: str = ..., id: int = ..., body: EditReactionOption = None
):
    """
    Add a reaction to a comment of an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/issues/{index}',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_delete(owner: str, repo: str = ..., index: int = ...):
    """
    Delete an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/{index}',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_get_issue(owner: str, repo: str = ..., index: int = ...):
    """
    Get an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/issues/{index}',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_edit_issue(
    owner: str, repo: str = ..., index: int = ..., body: EditIssueOption = None
):
    """
    Edit an issue. If using deadline only the date will be taken into account, and time of day ignored.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/{index}/assets',
    tags=['issue_management', 'file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_list_issue_attachments(owner: str, repo: str = ..., index: int = ...):
    """
    List issue's attachments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/issues/{index}/assets',
    tags=['repository_management', 'issue_management', 'file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_create_issue_attachment(
    owner: str,
    repo: str = ...,
    index: int = ...,
    name: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Create an issue attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}',
    tags=['issue_management', 'file_operations', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_delete_issue_attachment(
    owner: str, repo: str = ..., index: int = ..., attachment_id: int = ...
):
    """
    Delete an issue attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}',
    tags=['repository_management', 'issue_management', 'file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_get_issue_attachment(
    owner: str, repo: str = ..., index: int = ..., attachment_id: int = ...
):
    """
    Get an issue attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}',
    tags=['issue_management', 'file_operations', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_edit_issue_attachment(
    owner: str,
    repo: str = ...,
    index: int = ...,
    attachment_id: int = ...,
    body: EditAttachmentOptions = None,
):
    """
    Edit an issue attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/{index}/comments',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_get_comments(
    owner: str,
    repo: str = ...,
    index: int = ...,
    since: Optional[datetime] = None,
    before: Optional[datetime] = None,
):
    """
    List all comments on an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/issues/{index}/comments',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_create_comment(
    owner: str, repo: str = ..., index: int = ..., body: CreateIssueCommentOption = None
):
    """
    Add a comment to an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/issues/{index}/comments/{id}',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_delete_comment_deprecated(
    owner: str, repo: str = ..., index: int = ..., id: int = ...
):
    """
    Delete a comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/issues/{index}/comments/{id}',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_edit_comment_deprecated(
    owner: str,
    repo: str = ...,
    index: int = ...,
    id: int = ...,
    body: EditIssueCommentOption = None,
):
    """
    Edit a comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/issues/{index}/deadline',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_edit_issue_deadline(
    owner: str, repo: str = ..., index: int = ..., body: EditDeadlineOption = None
):
    """
    Set an issue deadline. If set to null, the deadline is deleted. If using deadline only the date will be taken into account, and time of day ignored.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/issues/{index}/labels',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_clear_labels(owner: str, repo: str = ..., index: int = ...):
    """
    Remove all labels from an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/{index}/labels',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_get_labels(owner: str, repo: str = ..., index: int = ...):
    """
    Get an issue's labels
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/issues/{index}/labels',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_add_label(
    owner: str, repo: str = ..., index: int = ..., body: IssueLabelsOption = None
):
    """
    Add a label to an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/issues/{index}/labels',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_replace_labels(
    owner: str, repo: str = ..., index: int = ..., body: IssueLabelsOption = None
):
    """
    Replace an issue's labels
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/issues/{index}/labels/{id}',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_remove_label(owner: str, repo: str = ..., index: int = ..., id: int = ...):
    """
    Remove a label from an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/issues/{index}/reactions',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_delete_issue_reaction(
    owner: str, repo: str = ..., index: int = ..., body: EditReactionOption = None
):
    """
    Remove a reaction from an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/{index}/reactions',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_get_issue_reactions(
    owner: str,
    repo: str = ...,
    index: int = ...,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    Get a list reactions of an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/issues/{index}/reactions',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_post_issue_reaction(
    owner: str, repo: str = ..., index: int = ..., body: EditReactionOption = None
):
    """
    Add a reaction to an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/issues/{index}/stopwatch/delete',
    tags=['issue_management', 'time_tracking'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_delete_stop_watch(owner: str, repo: str = ..., index: int = ...):
    """
    Delete an issue's existing stopwatch.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/issues/{index}/stopwatch/start',
    tags=['time_tracking', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_start_stop_watch(owner: str, repo: str = ..., index: int = ...):
    """
    Start stopwatch on an issue.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/issues/{index}/stopwatch/stop',
    tags=['issue_management', 'time_tracking'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_stop_stop_watch(owner: str, repo: str = ..., index: int = ...):
    """
    Stop an issue's existing stopwatch.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/{index}/subscriptions',
    tags=['user_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_subscriptions(
    owner: str,
    repo: str = ...,
    index: int = ...,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    Get users who subscribed on an issue.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/{index}/subscriptions/check',
    tags=['issue_management', 'notification_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_check_subscription(owner: str, repo: str = ..., index: int = ...):
    """
    Check if user is subscribed to an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/issues/{index}/subscriptions/{user}',
    tags=['issue_management', 'user_management', 'notification_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_delete_subscription(
    owner: str, repo: str = ..., index: int = ..., user: str = ...
):
    """
    Unsubscribe user from issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/issues/{index}/subscriptions/{user}',
    tags=['user_management', 'issue_management', 'notification_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_add_subscription(
    owner: str, repo: str = ..., index: int = ..., user: str = ...
):
    """
    Subscribe user to issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/{index}/timeline',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_get_comments_and_timeline(
    owner: str,
    repo: str = ...,
    index: int = ...,
    since: Optional[datetime] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
    before: Optional[datetime] = None,
):
    """
    List all comments and events on an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/issues/{index}/times',
    tags=['issue_management', 'time_tracking'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_reset_time(owner: str, repo: str = ..., index: int = ...):
    """
    Reset a tracked time of an issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/issues/{index}/times',
    tags=['time_tracking', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_tracked_times(
    owner: str,
    repo: str = ...,
    index: int = ...,
    user: Optional[str] = None,
    since: Optional[datetime] = None,
    before: Optional[datetime] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List an issue's tracked times
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/issues/{index}/times',
    tags=['issue_management', 'time_tracking'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_add_time(
    owner: str, repo: str = ..., index: int = ..., body: AddTimeOption = None
):
    """
    Add tracked time to a issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/issues/{index}/times/{id}',
    tags=['time_tracking', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_delete_time(owner: str, repo: str = ..., index: int = ..., id: int = ...):
    """
    Delete specific tracked time
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/keys',
    tags=['repository_management', 'user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_list_keys(
    owner: str,
    repo: str = ...,
    key_id: Optional[int] = None,
    fingerprint: Optional[str] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List a repository's keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/keys',
    tags=['repository_management', 'user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_create_key(owner: str, repo: str = ..., body: CreateKeyOption = None):
    """
    Add a key to a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/keys/{id}',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_delete_key(owner: str, repo: str = ..., id: int = ...):
    """
    Delete a key from a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/keys/{id}',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_key(owner: str, repo: str = ..., id: int = ...):
    """
    Get a repository's key by id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/labels',
    tags=['repository_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_list_labels(
    owner: str, repo: str = ..., page: Optional[int] = None, limit: Optional[int] = None
):
    """
    Get all of a repository's labels
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/labels',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_create_label(owner: str, repo: str = ..., body: CreateLabelOption = None):
    """
    Create a label
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/labels/{id}',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_delete_label(owner: str, repo: str = ..., id: int = ...):
    """
    Delete a label
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/labels/{id}',
    tags=['repository_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_get_label(owner: str, repo: str = ..., id: int = ...):
    """
    Get a single label
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/labels/{id}',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_edit_label(
    owner: str, repo: str = ..., id: int = ..., body: EditLabelOption = None
):
    """
    Update a label
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/languages',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_languages(owner: str, repo: str = ...):
    """
    Get languages and number of bytes of code written
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/media/{filepath}',
    tags=['repository_management', 'file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_raw_file_or_l_f_s(
    owner: str, repo: str = ..., filepath: str = ..., ref: Optional[str] = None
):
    """
    Get a file or it's LFS object from a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/milestones',
    tags=['repository_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_get_milestones_list(
    owner: str,
    repo: str = ...,
    state: Optional[str] = None,
    name: Optional[str] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    Get all of a repository's opened milestones
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/milestones',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_create_milestone(
    owner: str, repo: str = ..., body: CreateMilestoneOption = None
):
    """
    Create a milestone
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/milestones/{id}',
    tags=['issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_delete_milestone(owner: str, repo: str = ..., id: str = ...):
    """
    Delete a milestone
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/milestones/{id}',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_get_milestone(owner: str, repo: str = ..., id: str = ...):
    """
    Get a milestone
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/milestones/{id}',
    tags=['issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def issue_edit_milestone(
    owner: str, repo: str = ..., id: str = ..., body: EditMilestoneOption = None
):
    """
    Update a milestone
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/mirror-sync',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_mirror_sync(owner: str, repo: str = ...):
    """
    Sync a mirrored repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/notifications',
    tags=['notification_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def notify_get_repo_list(
    owner: str,
    repo: str = ...,
    all: Optional[bool] = None,
    status_types: Optional[StatusTypes] = Query(None, alias='status-types'),
    subject_type: Optional[SubjectType1] = Query(None, alias='subject-type'),
    since: Optional[datetime] = None,
    before: Optional[datetime] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List users's notification threads on a specific repo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/notifications',
    tags=['notification_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def notify_read_repo_list(
    owner: str,
    repo: str = ...,
    all: Optional[str] = None,
    status_types: Optional[StatusTypes] = Query(None, alias='status-types'),
    to_status: Optional[str] = Query(None, alias='to-status'),
    last_read_at: Optional[datetime] = None,
):
    """
    Mark notification threads as read, pinned or unread on a specific repo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pulls',
    tags=['repository_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_list_pull_requests(
    owner: str,
    repo: str = ...,
    state: Optional[State3] = None,
    sort: Optional[Sort2] = None,
    milestone: Optional[int] = None,
    labels: Optional[Labels] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List a repo's pull requests
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/pulls',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_create_pull_request(
    owner: str, repo: str = ..., body: CreatePullRequestOption = None
):
    """
    Create a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pulls/{index}',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_pull_request(owner: str, repo: str = ..., index: int = ...):
    """
    Get a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/pulls/{index}',
    tags=['repository_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_edit_pull_request(
    owner: str, repo: str = ..., index: int = ..., body: EditPullRequestOption = None
):
    """
    Update a pull request. If using deadline only the date will be taken into account, and time of day ignored.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pulls/{index}.{diffType}',
    tags=['repository_management', 'file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_download_pull_diff_or_patch(
    owner: str,
    repo: str = ...,
    index: int = ...,
    diff_type: DiffType = Path(..., alias='diffType'),
    binary: Optional[bool] = None,
):
    """
    Get a pull request diff or patch
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pulls/{index}/commits',
    tags=['repository_management', 'commit_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_pull_request_commits(
    owner: str,
    repo: str = ...,
    index: int = ...,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    Get commits for a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pulls/{index}/files',
    tags=['repository_management', 'file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_pull_request_files(
    owner: str,
    repo: str = ...,
    index: int = ...,
    skip_to: Optional[str] = Query(None, alias='skip-to'),
    whitespace: Optional[Whitespace] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    Get changed files for a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/pulls/{index}/merge',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_cancel_scheduled_auto_merge(owner: str, repo: str = ..., index: int = ...):
    """
    Cancel the scheduled auto merge for the given pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pulls/{index}/merge',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_pull_request_is_merged(owner: str, repo: str = ..., index: int = ...):
    """
    Check if a pull request has been merged
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/pulls/{index}/merge',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_merge_pull_request(
    owner: str, repo: str = ..., index: int = ..., body: MergePullRequestOption = None
):
    """
    Merge a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/pulls/{index}/requested_reviewers',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_delete_pull_review_requests(
    owner: str, repo: str = ..., index: int = ..., body: PullReviewRequestOptions = ...
):
    """
    cancel review requests for a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/pulls/{index}/requested_reviewers',
    tags=['repository_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_create_pull_review_requests(
    owner: str, repo: str = ..., index: int = ..., body: PullReviewRequestOptions = ...
):
    """
    create review requests for a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pulls/{index}/reviews',
    tags=['repository_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_list_pull_reviews(
    owner: str,
    repo: str = ...,
    index: int = ...,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List all reviews for a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/pulls/{index}/reviews',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_create_pull_review(
    owner: str, repo: str = ..., index: int = ..., body: CreatePullReviewOptions = ...
):
    """
    Create a review to an pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}',
    tags=['repository_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_delete_pull_review(
    owner: str, repo: str = ..., index: int = ..., id: int = ...
):
    """
    Delete a specific review from a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_pull_review(owner: str, repo: str = ..., index: int = ..., id: int = ...):
    """
    Get a specific review for a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_submit_pull_review(
    owner: str,
    repo: str = ...,
    index: int = ...,
    id: int = ...,
    body: SubmitPullReviewOptions = ...,
):
    """
    Submit a pending review to an pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/comments',
    tags=['repository_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_pull_review_comments(
    owner: str, repo: str = ..., index: int = ..., id: int = ...
):
    """
    Get a specific review for a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/dismissals',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_dismiss_pull_review(
    owner: str,
    repo: str = ...,
    index: int = ...,
    id: int = ...,
    body: DismissPullReviewOptions = ...,
):
    """
    Dismiss a review for a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/undismissals',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_un_dismiss_pull_review(
    owner: str, repo: str = ..., index: int = ..., id: int = ...
):
    """
    Cancel to dismiss a review for a pull request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/pulls/{index}/update',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_update_pull_request(
    owner: str, repo: str = ..., index: int = ..., style: Optional[Style] = None
):
    """
    Merge PR's baseBranch into headBranch
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/push_mirrors',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_list_push_mirrors(
    owner: str, repo: str = ..., page: Optional[int] = None, limit: Optional[int] = None
):
    """
    Get all push mirrors of the repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/push_mirrors',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_add_push_mirror(
    owner: str, repo: str = ..., body: CreatePushMirrorOption = None
):
    """
    add a push mirror to the repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/push_mirrors-sync',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_push_mirror_sync(owner: str, repo: str = ...):
    """
    Sync all push mirrored repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/push_mirrors/{name}',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_delete_push_mirror(owner: str, repo: str = ..., name: str = ...):
    """
    deletes a push mirror from a repository by remoteName
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/push_mirrors/{name}',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_push_mirror_by_remote_name(owner: str, repo: str = ..., name: str = ...):
    """
    Get push mirror of the repository by remoteName
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/raw/{filepath}',
    tags=['repository_management', 'file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_raw_file(
    owner: str, repo: str = ..., filepath: str = ..., ref: Optional[str] = None
):
    """
    Get a file from a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/releases',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_list_releases(
    owner: str,
    repo: str = ...,
    draft: Optional[bool] = None,
    pre_release: Optional[bool] = Query(None, alias='pre-release'),
    per_page: Optional[int] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List a repo's releases
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/releases',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_create_release(owner: str, repo: str = ..., body: CreateReleaseOption = None):
    """
    Create a release
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/releases/latest',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_latest_release(owner: str, repo: str = ...):
    """
    Gets the most recent non-prerelease, non-draft release of a repository, sorted by created_at
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/releases/tags/{tag}',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_delete_release_by_tag(owner: str, repo: str = ..., tag: str = ...):
    """
    Delete a release by tag name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/releases/tags/{tag}',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_release_by_tag(owner: str, repo: str = ..., tag: str = ...):
    """
    Get a release by tag name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/releases/{id}',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_delete_release(owner: str, repo: str = ..., id: int = ...):
    """
    Delete a release
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/releases/{id}',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_release(owner: str, repo: str = ..., id: int = ...):
    """
    Get a release
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/releases/{id}',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_edit_release(
    owner: str, repo: str = ..., id: int = ..., body: EditReleaseOption = None
):
    """
    Update a release
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/releases/{id}/assets',
    tags=['repository_management', 'file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_list_release_attachments(owner: str, repo: str = ..., id: int = ...):
    """
    List release's attachments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/releases/{id}/assets',
    tags=['repository_management', 'file_operations', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_create_release_attachment(
    owner: str,
    repo: str = ...,
    id: int = ...,
    name: Optional[str] = None,
    file: UploadFile = ...,
):
    """
    Create a release attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}',
    tags=['repository_management', 'file_operations', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_delete_release_attachment(
    owner: str, repo: str = ..., id: int = ..., attachment_id: int = ...
):
    """
    Delete a release attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}',
    tags=['repository_management', 'file_operations', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_release_attachment(
    owner: str, repo: str = ..., id: int = ..., attachment_id: int = ...
):
    """
    Get a release attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}',
    tags=['file_operations', 'issue_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_edit_release_attachment(
    owner: str,
    repo: str = ...,
    id: int = ...,
    attachment_id: int = ...,
    body: EditAttachmentOptions = None,
):
    """
    Edit a release attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/reviewers',
    tags=['user_management', 'repository_management', 'notification_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_reviewers(owner: str, repo: str = ...):
    """
    Return all users that can be requested to review in this repo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/signing-key.gpg',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_signing_key(owner: str, repo: str = ...):
    """
    Get signing-key.gpg for given repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/stargazers',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_list_stargazers(
    owner: str, repo: str = ..., page: Optional[int] = None, limit: Optional[int] = None
):
    """
    List a repo's stargazers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/statuses/{sha}',
    tags=['commit_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_list_statuses(
    owner: str,
    repo: str = ...,
    sha: str = ...,
    sort: Optional[Sort4] = None,
    state: Optional[State7] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    Get a commit's statuses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/statuses/{sha}',
    tags=['commit_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_create_status(
    owner: str, repo: str = ..., sha: str = ..., body: CreateStatusOption = None
):
    """
    Create a commit status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/subscribers',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_list_subscribers(
    owner: str, repo: str = ..., page: Optional[int] = None, limit: Optional[int] = None
):
    """
    List a repo's watchers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/subscription',
    tags=['repository_management', 'notification_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_delete_subscription(owner: str, repo: str = ...):
    """
    Unwatch a repo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/subscription',
    tags=['user_management', 'repository_management', 'notification_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_check_subscription(owner: str, repo: str = ...):
    """
    Check if the current user is watching a repo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/subscription',
    tags=['repository_management', 'notification_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_put_subscription(owner: str, repo: str = ...):
    """
    Watch a repo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/tags',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_list_tags(
    owner: str, repo: str = ..., page: Optional[int] = None, limit: Optional[int] = None
):
    """
    List a repository's tags
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/tags',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_create_tag(owner: str, repo: str = ..., body: CreateTagOption = None):
    """
    Create a new git tag in a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/tags/{tag}',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_delete_tag(owner: str, repo: str = ..., tag: str = ...):
    """
    Delete a repository's tag by name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/tags/{tag}',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_tag(owner: str, repo: str = ..., tag: str = ...):
    """
    Get the tag of a repository by tag name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/teams',
    tags=['organization_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_list_teams(owner: str, repo: str = ...):
    """
    List a repository's teams
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/teams/{team}',
    tags=['organization_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_delete_team(owner: str, repo: str = ..., team: str = ...):
    """
    Delete a team from a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/teams/{team}',
    tags=['organization_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_check_team(owner: str, repo: str = ..., team: str = ...):
    """
    Check if a team is assigned to a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/teams/{team}',
    tags=['organization_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_add_team(owner: str, repo: str = ..., team: str = ...):
    """
    Add a team to a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/times',
    tags=['time_tracking', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_tracked_times(
    owner: str,
    repo: str = ...,
    user: Optional[str] = None,
    since: Optional[datetime] = None,
    before: Optional[datetime] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List a repo's tracked times
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/times/{user}',
    tags=['time_tracking', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_tracked_times(owner: str, repo: str = ..., user: str = ...):
    """
    List a user's tracked times in a repo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/topics',
    tags=['repository_management', 'topic_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_list_topics(
    owner: str, repo: str = ..., page: Optional[int] = None, limit: Optional[int] = None
):
    """
    Get list of topics that a repository has
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/topics',
    tags=['repository_management', 'topic_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_update_topics(owner: str, repo: str = ..., body: RepoTopicOptions = None):
    """
    Replace list of topics for a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/topics/{topic}',
    tags=['repository_management', 'topic_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_delete_topic(owner: str, repo: str = ..., topic: str = ...):
    """
    Delete a topic from a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/repos/{owner}/{repo}/topics/{topic}',
    tags=['repository_management', 'topic_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_add_topic(owner: str, repo: str = ..., topic: str = ...):
    """
    Add a topic to a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/transfer',
    tags=['repository_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_transfer(owner: str, repo: str = ..., body: TransferRepoOption = ...):
    """
    Transfer a repo ownership
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/transfer/accept',
    tags=['repository_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def accept_repo_transfer(owner: str, repo: str = ...):
    """
    Accept a repo transfer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/transfer/reject',
    tags=['repository_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def reject_repo_transfer(owner: str, repo: str = ...):
    """
    Reject a repo transfer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{owner}/{repo}/wiki/new',
    tags=['repository_management', 'file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_create_wiki_page(
    owner: str, repo: str = ..., body: CreateWikiPageOptions = None
):
    """
    Create a wiki page
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/repos/{owner}/{repo}/wiki/page/{pageName}',
    tags=['repository_management', 'file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_delete_wiki_page(
    owner: str, repo: str = ..., page_name: str = Path(..., alias='pageName')
):
    """
    Delete a wiki page
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/wiki/page/{pageName}',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_wiki_page(
    owner: str, repo: str = ..., page_name: str = Path(..., alias='pageName')
):
    """
    Get a wiki page
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/repos/{owner}/{repo}/wiki/page/{pageName}',
    tags=['repository_management', 'file_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_edit_wiki_page(
    owner: str,
    repo: str = ...,
    page_name: str = Path(..., alias='pageName'),
    body: CreateWikiPageOptions = None,
):
    """
    Edit a wiki page
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/wiki/pages',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_wiki_pages(
    owner: str, repo: str = ..., page: Optional[int] = None, limit: Optional[int] = None
):
    """
    Get all wiki pages
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repos/{owner}/{repo}/wiki/revisions/{pageName}',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_wiki_page_revisions(
    owner: str,
    repo: str = ...,
    page_name: str = Path(..., alias='pageName'),
    page: Optional[int] = None,
):
    """
    Get revisions of a wiki page
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/repos/{template_owner}/{template_repo}/generate',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def generate_repo(
    template_owner: str, template_repo: str = ..., body: GenerateRepoOption = None
):
    """
    Create a repository using a template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repositories/{id}',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def repo_get_by_i_d(id: int):
    """
    Get a repository by id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/settings/api',
    tags=['organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def get_general_a_p_i_settings():
    """
    Get instance's global settings for api
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/settings/attachment',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def get_general_attachment_settings():
    """
    Get instance's global settings for Attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/settings/repository',
    tags=['repository_management', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def get_general_repository_settings():
    """
    Get instance's global settings for repositories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/settings/ui',
    tags=['user_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def get_general_u_i_settings():
    """
    Get instance's global settings for ui
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/signing-key.gpg',
    tags=['user_authentication', 'repository_settings'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def get_signing_key():
    """
    Get default signing-key.gpg
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/teams/{id}',
    tags=['organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_delete_team(id: int):
    """
    Delete a team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{id}',
    tags=['organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_get_team(id: int):
    """
    Get a team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/teams/{id}',
    tags=['organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_edit_team(id: int, body: EditTeamOption = None):
    """
    Edit a team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{id}/members',
    tags=['organization_management', 'user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_list_team_members(
    id: int, page: Optional[int] = None, limit: Optional[int] = None
):
    """
    List a team's members
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/teams/{id}/members/{username}',
    tags=['user_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_remove_team_member(id: int, username: str = ...):
    """
    Remove a team member
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{id}/members/{username}',
    tags=['user_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_list_team_member(id: int, username: str = ...):
    """
    List a particular member of team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/teams/{id}/members/{username}',
    tags=['user_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_add_team_member(id: int, username: str = ...):
    """
    Add a team member
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{id}/repos',
    tags=['repository_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_list_team_repos(
    id: int, page: Optional[int] = None, limit: Optional[int] = None
):
    """
    List a team's repos
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/teams/{id}/repos/{org}/{repo}',
    description=""" This does not delete the repository, it only removes the repository from the team. """,
    tags=['organization_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_remove_team_repository(id: int, org: str = ..., repo: str = ...):
    """
    Remove a repository from a team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{id}/repos/{org}/{repo}',
    tags=['repository_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_list_team_repo(id: int, org: str = ..., repo: str = ...):
    """
    List a particular repo of team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/teams/{id}/repos/{org}/{repo}',
    tags=['organization_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_add_team_repository(id: int, org: str = ..., repo: str = ...):
    """
    Add a repository to a team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/topics/search',
    tags=['search_operations', 'topic_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def topic_search(q: str, page: Optional[int] = None, limit: Optional[int] = None):
    """
    search topics via keyword
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user',
    tags=['user_management', 'user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_get_current():
    """
    Get the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/applications/oauth2',
    tags=['user_management', 'user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_get_oauth2_application(
    page: Optional[int] = None, limit: Optional[int] = None
):
    """
    List the authenticated user's oauth2 applications
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/user/applications/oauth2',
    tags=['user_management', 'user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_create_o_auth2_application(body: CreateOAuth2ApplicationOptions):
    """
    creates a new OAuth2 application
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/user/applications/oauth2/{id}',
    tags=['user_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_delete_o_auth2_application(id: int):
    """
    delete an OAuth2 Application
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/applications/oauth2/{id}',
    tags=['user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_get_o_auth2_application(id: int):
    """
    get an OAuth2 Application
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/user/applications/oauth2/{id}',
    tags=['user_authentication', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_update_o_auth2_application(
    id: int, body: CreateOAuth2ApplicationOptions = ...
):
    """
    update an OAuth2 Application, this includes regenerating the client secret
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/user/emails',
    tags=['user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_delete_email(body: DeleteEmailOption = None):
    """
    Delete email addresses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/emails',
    tags=['user_management', 'user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_list_emails():
    """
    List the authenticated user's email addresses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/user/emails',
    tags=['user_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_add_email(body: CreateEmailOption = None):
    """
    Add email addresses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/followers',
    tags=['user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_list_followers(
    page: Optional[int] = None, limit: Optional[int] = None
):
    """
    List the authenticated user's followers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/following',
    tags=['user_management', 'user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_list_following(
    page: Optional[int] = None, limit: Optional[int] = None
):
    """
    List the users that the authenticated user is following
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/user/following/{username}',
    tags=['user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_delete_follow(username: str):
    """
    Unfollow a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/following/{username}',
    tags=['user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_check_following(username: str):
    """
    Check whether a user is followed by the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/user/following/{username}',
    tags=['user_management', 'activitypub_integration'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_put_follow(username: str):
    """
    Follow a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/gpg_key_token',
    tags=['user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def get_verification_token():
    """
    Get a Token to verify
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/user/gpg_key_verify',
    tags=['user_management', 'user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_verify_g_p_g_key():
    """
    Verify a GPG key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/gpg_keys',
    tags=['user_management', 'user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_list_g_p_g_keys(
    page: Optional[int] = None, limit: Optional[int] = None
):
    """
    List the authenticated user's GPG keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/user/gpg_keys',
    tags=['user_management', 'user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_post_g_p_g_key(body: CreateGPGKeyOption = None):
    """
    Create a GPG key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/user/gpg_keys/{id}',
    tags=['user_authentication', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_delete_g_p_g_key(id: int):
    """
    Remove a GPG key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/gpg_keys/{id}',
    tags=['user_management', 'user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_get_g_p_g_key(id: int):
    """
    Get a GPG key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/keys',
    tags=['user_management', 'user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_list_keys(
    fingerprint: Optional[str] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List the authenticated user's public keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/user/keys',
    tags=['user_authentication', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_post_key(body: CreateKeyOption = None):
    """
    Create a public key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/user/keys/{id}',
    tags=['user_management', 'user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_delete_key(id: int):
    """
    Delete a public key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/keys/{id}',
    tags=['user_management', 'user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_get_key(id: int):
    """
    Get a public key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/orgs',
    tags=['user_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_list_current_user_orgs(page: Optional[int] = None, limit: Optional[int] = None):
    """
    List the current user's organizations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/repos',
    tags=['repository_management', 'user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_list_repos(page: Optional[int] = None, limit: Optional[int] = None):
    """
    List the repos that the authenticated user owns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/user/repos',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def create_current_user_repo(body: CreateRepoOption = None):
    """
    Create a repository
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/settings',
    tags=['user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def get_user_settings():
    """
    Get user settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/user/settings',
    tags=['user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def update_user_settings(body: UserSettingsOptions = None):
    """
    Update user settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/starred',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_list_starred(page: Optional[int] = None, limit: Optional[int] = None):
    """
    The repos that the authenticated user has starred
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/user/starred/{owner}/{repo}',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_delete_star(owner: str, repo: str = ...):
    """
    Unstar the given repo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/starred/{owner}/{repo}',
    tags=['user_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_check_starring(owner: str, repo: str = ...):
    """
    Whether the authenticated is starring the repo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/user/starred/{owner}/{repo}',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_put_star(owner: str, repo: str = ...):
    """
    Star the given repo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/stopwatches',
    tags=['time_tracking'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_get_stop_watches(page: Optional[int] = None, limit: Optional[int] = None):
    """
    Get list of all existing stopwatches
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/subscriptions',
    tags=['user_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_list_subscriptions(
    page: Optional[int] = None, limit: Optional[int] = None
):
    """
    List repositories watched by the authenticated user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/teams',
    tags=['user_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_list_teams(page: Optional[int] = None, limit: Optional[int] = None):
    """
    List all the teams a user belongs to
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/times',
    tags=['time_tracking', 'user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_current_tracked_times(
    page: Optional[int] = None,
    limit: Optional[int] = None,
    since: Optional[datetime] = None,
    before: Optional[datetime] = None,
):
    """
    List the current user's tracked times
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/search',
    tags=['user_management', 'search_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_search(
    q: Optional[str] = None,
    uid: Optional[int] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    Search for users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}',
    tags=['user_management', 'user_authentication', 'search_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_get(username: str):
    """
    Get a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/followers',
    tags=['user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_list_followers(
    username: str, page: Optional[int] = None, limit: Optional[int] = None
):
    """
    List the given user's followers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/following',
    tags=['user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_list_following(
    username: str, page: Optional[int] = None, limit: Optional[int] = None
):
    """
    List the users that the given user is following
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/following/{target}',
    tags=['user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_check_following(username: str, target: str = ...):
    """
    Check if one user is following another user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/gpg_keys',
    tags=['user_management', 'user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_list_g_p_g_keys(
    username: str, page: Optional[int] = None, limit: Optional[int] = None
):
    """
    List the given user's GPG keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/heatmap',
    tags=['user_management', 'notification_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_get_heatmap_data(username: str):
    """
    Get a user's heatmap
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/keys',
    tags=['user_management', 'user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_list_keys(
    username: str,
    fingerprint: Optional[str] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List the given user's public keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/orgs',
    tags=['user_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_list_user_orgs(
    username: str, page: Optional[int] = None, limit: Optional[int] = None
):
    """
    List a user's organizations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/orgs/{org}/permissions',
    tags=['user_management', 'organization_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def org_get_user_permissions(username: str, org: str = ...):
    """
    Get user permissions in organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/repos',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_list_repos(
    username: str, page: Optional[int] = None, limit: Optional[int] = None
):
    """
    List the repos owned by the given user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/starred',
    tags=['user_management', 'repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_list_starred(
    username: str, page: Optional[int] = None, limit: Optional[int] = None
):
    """
    The repos that the given user has starred
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/subscriptions',
    tags=['repository_management', 'user_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_list_subscriptions(
    username: str, page: Optional[int] = None, limit: Optional[int] = None
):
    """
    List the repositories watched by a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{username}/tokens',
    tags=['user_management', 'user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_get_tokens(
    username: str, page: Optional[int] = None, limit: Optional[int] = None
):
    """
    List the authenticated user's access tokens
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{username}/tokens',
    tags=['user_management', 'user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_create_token(username: str, body: CreateAccessTokenOption = None):
    """
    Create an access token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{username}/tokens/{token}',
    tags=['user_management', 'user_authentication'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def user_delete_access_token(username: str, token: str = ...):
    """
    delete an access token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/version',
    tags=['repository_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyQuery(name="token"),
        APIKeyQuery(name="access_token"),
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="sudo"),
        APIKeyHeader(name="Sudo"),
        APIKeyHeader(name="X-GITEA-OTP"),
    ],
)
def get_version():
    """
    Returns the version of the Gitea application
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
